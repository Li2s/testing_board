
testing_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08004444  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004444  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cac0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cff  00000000  00000000  0002cb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002f458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002420d  00000000  00000000  0002ff78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fc0  00000000  00000000  00054185  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd03f  00000000  00000000  0005d145  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  0012a200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042e4 	.word	0x080042e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080042e4 	.word	0x080042e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef>:
		mid_value_ms,
		max_value_ms,
		measurement_error);

void IcHandlerTim3(TIM_HandleTypeDef *htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	switch ((uint8_t)htim->Channel)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	7f1b      	ldrb	r3, [r3, #28]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d002      	beq.n	80004de <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x16>
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d004      	beq.n	80004e6 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x1e>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_2:
			elev.calculatePulseWidth();
			break;
	}
}
 80004dc:	e007      	b.n	80004ee <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x26>
			aileron_servo_command.calculatePulseWidth();
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x30>)
 80004e0:	f003 fd04 	bl	8003eec <_ZN11PWMCapturer19calculatePulseWidthEv>
			break;
 80004e4:	e003      	b.n	80004ee <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x26>
			elev.calculatePulseWidth();
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x34>)
 80004e8:	f003 fd00 	bl	8003eec <_ZN11PWMCapturer19calculatePulseWidthEv>
			break;
 80004ec:	bf00      	nop
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000178 	.word	0x20000178
 80004fc:	200001a0 	.word	0x200001a0

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0a2      	sub	sp, #136	; 0x88
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fc57 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f8d9 	bl	80006c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fa57 	bl	80009c0 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000512:	f000 fa27 	bl	8000964 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 8000516:	f000 f947 	bl	80007a8 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_RegisterCallback(&htim3, HAL_TIM_IC_CAPTURE_CB_ID, IcHandlerTim3);
 800051a:	4a61      	ldr	r2, [pc, #388]	; (80006a0 <main+0x1a0>)
 800051c:	2112      	movs	r1, #18
 800051e:	4861      	ldr	r0, [pc, #388]	; (80006a4 <main+0x1a4>)
 8000520:	f002 f938 	bl	8002794 <HAL_TIM_RegisterCallback>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	485f      	ldr	r0, [pc, #380]	; (80006a4 <main+0x1a4>)
 8000528:	f001 fce2 	bl	8001ef0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800052c:	2104      	movs	r1, #4
 800052e:	485d      	ldr	r0, [pc, #372]	; (80006a4 <main+0x1a4>)
 8000530:	f001 fcde 	bl	8001ef0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000534:	2108      	movs	r1, #8
 8000536:	485b      	ldr	r0, [pc, #364]	; (80006a4 <main+0x1a4>)
 8000538:	f001 fc5a 	bl	8001df0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800053c:	210c      	movs	r1, #12
 800053e:	4859      	ldr	r0, [pc, #356]	; (80006a4 <main+0x1a4>)
 8000540:	f001 fc56 	bl	8001df0 <HAL_TIM_PWM_Start>

  Servo switch_PWM_gen(htim3.Instance, 3), aileron_PWM_gen(htim3.Instance, 4);
 8000544:	4b57      	ldr	r3, [pc, #348]	; (80006a4 <main+0x1a4>)
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800054c:	2203      	movs	r2, #3
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fdfa 	bl	8004148 <_ZN5ServoC1EP11TIM_TypeDefh>
 8000554:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <main+0x1a4>)
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800055c:	2204      	movs	r2, #4
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fdf2 	bl	8004148 <_ZN5ServoC1EP11TIM_TypeDefh>
  char str[100] = "Hello\n";
 8000564:	4a50      	ldr	r2, [pc, #320]	; (80006a8 <main+0x1a8>)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056c:	6018      	str	r0, [r3, #0]
 800056e:	3304      	adds	r3, #4
 8000570:	8019      	strh	r1, [r3, #0]
 8000572:	3302      	adds	r3, #2
 8000574:	0c0a      	lsrs	r2, r1, #16
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	f107 030b 	add.w	r3, r7, #11
 800057c:	225d      	movs	r2, #93	; 0x5d
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fe57 	bl	8004234 <memset>

  uint32_t eps = 4; //delta between PWM measurements
 8000586:	2304      	movs	r3, #4
 8000588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t check1_flag = 0,
 800058c:	2300      	movs	r3, #0
 800058e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  check2_flag = 0,
 8000592:	2300      	movs	r3, #0
 8000594:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		  counter = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (counter < 1)
 800059e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1fb      	bne.n	800059e <main+0x9e>
	  {
		  counter++;
 80005a6:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80005aa:	3301      	adds	r3, #1
 80005ac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		  //test1 - direct mode aileron command check
		  HAL_UART_Transmit(&huart1, (uint8_t*)"Test 1 in progress\n", sizeof(str), 1000);
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	2264      	movs	r2, #100	; 0x64
 80005b6:	493d      	ldr	r1, [pc, #244]	; (80006ac <main+0x1ac>)
 80005b8:	483d      	ldr	r0, [pc, #244]	; (80006b0 <main+0x1b0>)
 80005ba:	f002 ffae 	bl	800351a <HAL_UART_Transmit>

		  switch_PWM_gen.setPositionMicroSeconds(989);
 80005be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005c2:	f240 31dd 	movw	r1, #989	; 0x3dd
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fdd4 	bl	8004174 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f000 fc64 	bl	8000e9c <HAL_Delay>

		  aileron_PWM_gen.setPositionMicroSeconds(989);
 80005d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005d8:	f240 31dd 	movw	r1, #989	; 0x3dd
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fdc9 	bl	8004174 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e6:	f000 fc59 	bl	8000e9c <HAL_Delay>
		  if(abs((int)(aileron_servo_command.getPulseWidth() - 989)) < eps)
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <main+0x1b4>)
 80005ec:	f003 fc72 	bl	8003ed4 <_ZN11PWMCapturer13getPulseWidthEv>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f2a3 33dd 	subw	r3, r3, #989	; 0x3dd
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bfb8      	it	lt
 80005fa:	425b      	neglt	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000602:	4293      	cmp	r3, r2
 8000604:	bf8c      	ite	hi
 8000606:	2301      	movhi	r3, #1
 8000608:	2300      	movls	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <main+0x118>
			  check1_flag = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000616:	e002      	b.n	800061e <main+0x11e>
		  else
			  check1_flag = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		  HAL_Delay(1000);
 800061e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000622:	f000 fc3b 	bl	8000e9c <HAL_Delay>
		  aileron_PWM_gen.setPositionMicroSeconds(2013);
 8000626:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800062a:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fda0 	bl	8004174 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000638:	f000 fc30 	bl	8000e9c <HAL_Delay>
		  if(abs((int)(aileron_servo_command.getPulseWidth() - 2013)) < eps)
 800063c:	481d      	ldr	r0, [pc, #116]	; (80006b4 <main+0x1b4>)
 800063e:	f003 fc49 	bl	8003ed4 <_ZN11PWMCapturer13getPulseWidthEv>
 8000642:	4603      	mov	r3, r0
 8000644:	f2a3 73dd 	subw	r3, r3, #2013	; 0x7dd
 8000648:	2b00      	cmp	r3, #0
 800064a:	bfb8      	it	lt
 800064c:	425b      	neglt	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000654:	4293      	cmp	r3, r2
 8000656:	bf8c      	ite	hi
 8000658:	2301      	movhi	r3, #1
 800065a:	2300      	movls	r3, #0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d003      	beq.n	800066a <main+0x16a>
			  check2_flag = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8000668:	e002      	b.n	8000670 <main+0x170>
		  else
			  check2_flag = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

		  if (check1_flag*check2_flag == 1)
 8000670:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000674:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	2b01      	cmp	r3, #1
 800067e:	d107      	bne.n	8000690 <main+0x190>
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Test 1 passed\n", sizeof(str), 1000);
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	490c      	ldr	r1, [pc, #48]	; (80006b8 <main+0x1b8>)
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <main+0x1b0>)
 800068a:	f002 ff46 	bl	800351a <HAL_UART_Transmit>
 800068e:	e786      	b.n	800059e <main+0x9e>
		  else
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Test 1 failed\n", sizeof(str), 1000);
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	2264      	movs	r2, #100	; 0x64
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <main+0x1bc>)
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <main+0x1b0>)
 800069a:	f002 ff3e 	bl	800351a <HAL_UART_Transmit>
	  if (counter < 1)
 800069e:	e77e      	b.n	800059e <main+0x9e>
 80006a0:	080004c9 	.word	0x080004c9
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	08004330 	.word	0x08004330
 80006ac:	080042fc 	.word	0x080042fc
 80006b0:	20000138 	.word	0x20000138
 80006b4:	20000178 	.word	0x20000178
 80006b8:	08004310 	.word	0x08004310
 80006bc:	08004320 	.word	0x08004320

080006c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fdb0 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <_Z18SystemClock_Configv+0xe4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <_Z18SystemClock_Configv+0xe4>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <_Z18SystemClock_Configv+0xe4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe77 	bl	8001438 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800075a:	f000 f967 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2105      	movs	r1, #5
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f8cb 	bl	8001918 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000792:	f000 f94b 	bl	8000a2c <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	; 0x48
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80007e8:	4a5d      	ldr	r2, [pc, #372]	; (8000960 <_ZL12MX_TIM3_Initv+0x1b8>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80007ec:	4b5b      	ldr	r3, [pc, #364]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80007ee:	224f      	movs	r2, #79	; 0x4f
 80007f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b5a      	ldr	r3, [pc, #360]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 22000;
 80007f8:	4b58      	ldr	r3, [pc, #352]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80007fa:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80007fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b56      	ldr	r3, [pc, #344]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b55      	ldr	r3, [pc, #340]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080c:	4853      	ldr	r0, [pc, #332]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 800080e:	f001 fa75 	bl	8001cfc <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <_ZL12MX_TIM3_Initv+0x7e>
  {
    Error_Handler();
 8000822:	f000 f903 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000830:	4619      	mov	r1, r3
 8000832:	484a      	ldr	r0, [pc, #296]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000834:	f001 fe4e 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	bf14      	ite	ne
 800083e:	2301      	movne	r3, #1
 8000840:	2300      	moveq	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <_ZL12MX_TIM3_Initv+0xa4>
  {
    Error_Handler();
 8000848:	f000 f8f0 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800084c:	4843      	ldr	r0, [pc, #268]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 800084e:	f001 fb0d 	bl	8001e6c <HAL_TIM_IC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <_ZL12MX_TIM3_Initv+0xbe>
  {
    Error_Handler();
 8000862:	f000 f8e3 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000866:	483d      	ldr	r0, [pc, #244]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000868:	f001 fa80 	bl	8001d6c <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 800087c:	f000 f8d6 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088c:	4619      	mov	r1, r3
 800088e:	4833      	ldr	r0, [pc, #204]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000890:	f002 fd5c 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <_ZL12MX_TIM3_Initv+0x100>
  {
    Error_Handler();
 80008a4:	f000 f8c2 	bl	8000a2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008ac:	2301      	movs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	4826      	ldr	r0, [pc, #152]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80008c2:	f001 fca4 	bl	800220e <HAL_TIM_IC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <_ZL12MX_TIM3_Initv+0x132>
  {
    Error_Handler();
 80008d6:	f000 f8a9 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2204      	movs	r2, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	481e      	ldr	r0, [pc, #120]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 80008e4:	f001 fc93 	bl	800220e <HAL_TIM_IC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_TIM3_Initv+0x154>
  {
    Error_Handler();
 80008f8:	f000 f898 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2208      	movs	r2, #8
 8000910:	4619      	mov	r1, r3
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000914:	f001 fd18 	bl	8002348 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL12MX_TIM3_Initv+0x184>
  {
    Error_Handler();
 8000928:	f000 f880 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	220c      	movs	r2, #12
 8000930:	4619      	mov	r1, r3
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 8000934:	f001 fd08 	bl	8002348 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZL12MX_TIM3_Initv+0x1a4>
  {
    Error_Handler();
 8000948:	f000 f870 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZL12MX_TIM3_Initv+0x1b4>)
 800094e:	f000 f93d 	bl	8000bcc <HAL_TIM_MspPostInit>

}
 8000952:	bf00      	nop
 8000954:	3748      	adds	r7, #72	; 0x48
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000008c 	.word	0x2000008c
 8000960:	40000400 	.word	0x40000400

08000964 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_ZL19MX_USART1_UART_Initv+0x58>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800099c:	f002 fd70 	bl	8003480 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80009b0:	f000 f83c 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000138 	.word	0x20000138
 80009bc:	40011000 	.word	0x40011000

080009c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <_ZL12MX_GPIO_Initv+0x68>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x6>

08000a34 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af04      	add	r7, sp, #16
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d122      	bne.n	8000a8a <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d11d      	bne.n	8000a8a <_Z41__static_initialization_and_destruction_0ii+0x56>
PWMCapturer aileron_servo_command = PWMCapturer(
 8000a4e:	2304      	movs	r3, #4
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f240 33dd 	movw	r3, #989	; 0x3dd
 8000a62:	2201      	movs	r2, #1
 8000a64:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000a66:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000a68:	f003 f9b6 	bl	8003dd8 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth>
PWMCapturer elev = PWMCapturer(
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	f240 33dd 	movw	r3, #989	; 0x3dd
 8000a80:	2202      	movs	r2, #2
 8000a82:	490b      	ldr	r1, [pc, #44]	; (8000ab0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000a86:	f003 f9a7 	bl	8003dd8 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10a      	bne.n	8000aa6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d105      	bne.n	8000aa6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000a9c:	f003 f9fa 	bl	8003e94 <_ZN11PWMCapturerD1Ev>
PWMCapturer aileron_servo_command = PWMCapturer(
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000aa2:	f003 f9f7 	bl	8003e94 <_ZN11PWMCapturerD1Ev>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	20000178 	.word	0x20000178
 8000ab8:	200001a0 	.word	0x200001a0

08000abc <_GLOBAL__sub_I_htim3>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff ffb5 	bl	8000a34 <_Z41__static_initialization_and_destruction_0ii>
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_GLOBAL__sub_D_htim3>:
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ffad 	bl	8000a34 <_Z41__static_initialization_and_destruction_0ii>
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_TIM_Base_MspInit+0x94>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d133      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a1b      	ldr	r2, [pc, #108]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_TIM_Base_MspInit+0x98>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b96:	2302      	movs	r3, #2
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ba2:	f000 faaf 	bl	8001104 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	201d      	movs	r0, #29
 8000bac:	f000 fa73 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f000 fa8c 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <HAL_TIM_MspPostInit+0x68>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d11d      	bne.n	8000c2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_TIM_MspPostInit+0x6c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_TIM_MspPostInit+0x6c>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_TIM_MspPostInit+0x6c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_TIM_MspPostInit+0x70>)
 8000c26:	f000 fa6d 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_UART_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12c      	bne.n	8000cbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_UART_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cac:	2307      	movs	r3, #7
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_UART_MspInit+0x8c>)
 8000cb8:	f000 fa24 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40011000 	.word	0x40011000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f89e 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM3_IRQHandler+0x10>)
 8000d2a:	f001 f949 	bl	8001fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000008c 	.word	0x2000008c

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SystemInit+0x28>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <SystemInit+0x28>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SystemInit+0x28>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	609a      	str	r2, [r3, #8]
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d6a:	e003      	b.n	8000d74 <LoopCopyDataInit>

08000d6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d72:	3104      	adds	r1, #4

08000d74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d7c:	d3f6      	bcc.n	8000d6c <CopyDataInit>
  ldr  r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d80:	e002      	b.n	8000d88 <LoopFillZerobss>

08000d82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d84:	f842 3b04 	str.w	r3, [r2], #4

08000d88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d8c:	d3f9      	bcc.n	8000d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff ffd3 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fa23 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fbb3 	bl	8000500 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000da0:	080043d4 	.word	0x080043d4
  ldr  r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000da8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000db0:	200001d0 	.word	0x200001d0

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f94d 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe76 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f965 	bl	80010ea <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f92d 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200001cc 	.word	0x200001cc

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200001cc 	.word	0x200001cc

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_Delay+0x40>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	e16b      	b.n	80013f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	429a      	cmp	r2, r3
 800113a:	f040 815a 	bne.w	80013f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00b      	beq.n	800115e <HAL_GPIO_Init+0x5a>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001152:	2b11      	cmp	r3, #17
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0xfc>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80b4 	beq.w	80013f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_GPIO_Init+0x308>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a5e      	ldr	r2, [pc, #376]	; (800140c <HAL_GPIO_Init+0x308>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_GPIO_Init+0x308>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a6:	4a5a      	ldr	r2, [pc, #360]	; (8001410 <HAL_GPIO_Init+0x30c>)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	3302      	adds	r3, #2
 80012ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x226>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x222>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <HAL_GPIO_Init+0x318>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x21e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4e      	ldr	r2, [pc, #312]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_GPIO_Init+0x320>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <HAL_GPIO_Init+0x324>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <HAL_GPIO_Init+0x328>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4a      	ldr	r2, [pc, #296]	; (8001430 <HAL_GPIO_Init+0x32c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x20a>
 800130a:	2307      	movs	r3, #7
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x228>
 800130e:	2308      	movs	r3, #8
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x228>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x228>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x228>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_GPIO_Init+0x30c>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_GPIO_Init+0x330>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136e:	4a31      	ldr	r2, [pc, #196]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x330>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_GPIO_Init+0x330>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_GPIO_Init+0x330>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae90 	bls.w	8001120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	3724      	adds	r7, #36	; 0x24
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40023800 	.word	0x40023800
 8001410:	40013800 	.word	0x40013800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40013c00 	.word	0x40013c00

08001438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e25b      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d075      	beq.n	8001542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001456:	4ba3      	ldr	r3, [pc, #652]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d00c      	beq.n	800147c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4ba0      	ldr	r3, [pc, #640]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d112      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146e:	4b9d      	ldr	r3, [pc, #628]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b99      	ldr	r3, [pc, #612]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d05b      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d157      	bne.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e236      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x74>
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a90      	ldr	r2, [pc, #576]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x98>
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a8a      	ldr	r2, [pc, #552]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a87      	ldr	r2, [pc, #540]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0xb0>
 80014d0:	4b84      	ldr	r3, [pc, #528]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a83      	ldr	r2, [pc, #524]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a80      	ldr	r2, [pc, #512]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fcc8 	bl	8000e84 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fcc4 	bl	8000e84 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e1fb      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b76      	ldr	r3, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0xc0>
 8001516:	e014      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcb4 	bl	8000e84 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcb0 	bl	8000e84 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1e7      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0xe8>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b62      	ldr	r3, [pc, #392]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001562:	2b08      	cmp	r3, #8
 8001564:	d11c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e1bb      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	4952      	ldr	r1, [pc, #328]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	e03a      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a8:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCC_OscConfig+0x2b0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ae:	f7ff fc69 	bl	8000e84 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc65 	bl	8000e84 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e19c      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4940      	ldr	r1, [pc, #256]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x2b0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc48 	bl	8000e84 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc44 	bl	8000e84 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e17b      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d030      	beq.n	8001684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d016      	beq.n	8001658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_OscConfig+0x2b4>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fc28 	bl	8000e84 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fc24 	bl	8000e84 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e15b      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x200>
 8001656:	e015      	b.n	8001684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_OscConfig+0x2b4>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fc11 	bl	8000e84 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fc0d 	bl	8000e84 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e144      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a0 	beq.w	80017d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_RCC_OscConfig+0x2b8>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbd3 	bl	8000e84 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e011      	b.n	8001706 <HAL_RCC_OscConfig+0x2ce>
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	42470000 	.word	0x42470000
 80016ec:	42470e80 	.word	0x42470e80
 80016f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f4:	f7ff fbc6 	bl	8000e84 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0fd      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x4d4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x2f0>
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e01c      	b.n	8001762 <HAL_RCC_OscConfig+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x312>
 8001730:	4b77      	ldr	r3, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a76      	ldr	r2, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	4b74      	ldr	r3, [pc, #464]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	4a73      	ldr	r2, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	; 0x70
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x32a>
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174e:	4a70      	ldr	r2, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	6713      	str	r3, [r2, #112]	; 0x70
 8001756:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a6d      	ldr	r2, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fb8b 	bl	8000e84 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb87 	bl	8000e84 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0bc      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ee      	beq.n	8001772 <HAL_RCC_OscConfig+0x33a>
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb75 	bl	8000e84 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb71 	bl	8000e84 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0a6      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b4:	4b56      	ldr	r3, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ee      	bne.n	800179e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d105      	bne.n	80017d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8092 	beq.w	8001900 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d05c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d141      	bne.n	8001874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_RCC_OscConfig+0x4dc>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb45 	bl	8000e84 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fb41 	bl	8000e84 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e078      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	019b      	lsls	r3, r3, #6
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	3b01      	subs	r3, #1
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	061b      	lsls	r3, r3, #24
 8001840:	4933      	ldr	r1, [pc, #204]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_RCC_OscConfig+0x4dc>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fb1a 	bl	8000e84 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fb16 	bl	8000e84 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04d      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x41c>
 8001872:	e045      	b.n	8001900 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x4dc>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fb03 	bl	8000e84 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff faff 	bl	8000e84 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e036      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x44a>
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e029      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d115      	bne.n	80018fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d6:	4013      	ands	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d10d      	bne.n	80018fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000
 8001910:	40023800 	.word	0x40023800
 8001914:	42470060 	.word	0x42470060

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa3c 	bl	8000e84 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa38 	bl	8000e84 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f99c 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08004394 	.word	0x08004394
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d007      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x32>
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d008      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x38>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 80b4 	bne.w	8001c78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b12:	60bb      	str	r3, [r7, #8]
       break;
 8001b14:	e0b3      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b18:	60bb      	str	r3, [r7, #8]
      break;
 8001b1a:	e0b0      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d04a      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	f04f 0400 	mov.w	r4, #0
 8001b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	ea03 0501 	and.w	r5, r3, r1
 8001b48:	ea04 0602 	and.w	r6, r4, r2
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	4632      	mov	r2, r6
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	f04f 0400 	mov.w	r4, #0
 8001b58:	0154      	lsls	r4, r2, #5
 8001b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	4619      	mov	r1, r3
 8001b62:	4622      	mov	r2, r4
 8001b64:	1b49      	subs	r1, r1, r5
 8001b66:	eb62 0206 	sbc.w	r2, r2, r6
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f04f 0400 	mov.w	r4, #0
 8001b72:	0194      	lsls	r4, r2, #6
 8001b74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b78:	018b      	lsls	r3, r1, #6
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b80:	f04f 0100 	mov.w	r1, #0
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	00e2      	lsls	r2, r4, #3
 8001b8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b8e:	00d9      	lsls	r1, r3, #3
 8001b90:	460b      	mov	r3, r1
 8001b92:	4614      	mov	r4, r2
 8001b94:	195b      	adds	r3, r3, r5
 8001b96:	eb44 0406 	adc.w	r4, r4, r6
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	0262      	lsls	r2, r4, #9
 8001ba4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ba8:	0259      	lsls	r1, r3, #9
 8001baa:	460b      	mov	r3, r1
 8001bac:	4614      	mov	r4, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f04f 0400 	mov.w	r4, #0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	f7fe fb04 	bl	80001c8 <__aeabi_uldivmod>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	e049      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	f04f 0400 	mov.w	r4, #0
 8001bd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	ea03 0501 	and.w	r5, r3, r1
 8001bde:	ea04 0602 	and.w	r6, r4, r2
 8001be2:	4629      	mov	r1, r5
 8001be4:	4632      	mov	r2, r6
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	0154      	lsls	r4, r2, #5
 8001bf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf4:	014b      	lsls	r3, r1, #5
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	1b49      	subs	r1, r1, r5
 8001bfc:	eb62 0206 	sbc.w	r2, r2, r6
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f04f 0400 	mov.w	r4, #0
 8001c08:	0194      	lsls	r4, r2, #6
 8001c0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c0e:	018b      	lsls	r3, r1, #6
 8001c10:	1a5b      	subs	r3, r3, r1
 8001c12:	eb64 0402 	sbc.w	r4, r4, r2
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	00e2      	lsls	r2, r4, #3
 8001c20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c24:	00d9      	lsls	r1, r3, #3
 8001c26:	460b      	mov	r3, r1
 8001c28:	4614      	mov	r4, r2
 8001c2a:	195b      	adds	r3, r3, r5
 8001c2c:	eb44 0406 	adc.w	r4, r4, r6
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	02a2      	lsls	r2, r4, #10
 8001c3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c3e:	0299      	lsls	r1, r3, #10
 8001c40:	460b      	mov	r3, r1
 8001c42:	4614      	mov	r4, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	4621      	mov	r1, r4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f04f 0400 	mov.w	r4, #0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4623      	mov	r3, r4
 8001c52:	f7fe fab9 	bl	80001c8 <__aeabi_uldivmod>
 8001c56:	4603      	mov	r3, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	60bb      	str	r3, [r7, #8]
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c7a:	60bb      	str	r3, [r7, #8]
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	080043a4 	.word	0x080043a4

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffdc 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	080043a4 	.word	0x080043a4

08001cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e028      	b.n	8001d60 <HAL_TIM_Base_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d111      	bne.n	8001d3e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f001 fabc 	bl	80032a0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <HAL_TIM_Base_Init+0x6c>)
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f000 fe6b 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08000b2d 	.word	0x08000b2d

08001d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e028      	b.n	8001dd0 <HAL_TIM_PWM_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d111      	bne.n	8001dae <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f001 fa84 	bl	80032a0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_TIM_PWM_Init+0x6c>)
 8001da4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f000 fe33 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	08001ddd 	.word	0x08001ddd

08001ddc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fa26 	bl	8003254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <HAL_TIM_PWM_Start+0x74>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_TIM_PWM_Start+0x2c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_TIM_PWM_Start+0x78>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_TIM_PWM_Start+0x30>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_TIM_PWM_Start+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e028      	b.n	8001ed0 <HAL_TIM_IC_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d111      	bne.n	8001eae <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f001 fa04 	bl	80032a0 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_TIM_IC_Init+0x6c>)
 8001ea4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f000 fdb3 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	08001edd 	.word	0x08001edd

08001edc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b0c      	cmp	r3, #12
 8001efe:	d841      	bhi.n	8001f84 <HAL_TIM_IC_Start_IT+0x94>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_TIM_IC_Start_IT+0x18>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f3d 	.word	0x08001f3d
 8001f0c:	08001f85 	.word	0x08001f85
 8001f10:	08001f85 	.word	0x08001f85
 8001f14:	08001f85 	.word	0x08001f85
 8001f18:	08001f4f 	.word	0x08001f4f
 8001f1c:	08001f85 	.word	0x08001f85
 8001f20:	08001f85 	.word	0x08001f85
 8001f24:	08001f85 	.word	0x08001f85
 8001f28:	08001f61 	.word	0x08001f61
 8001f2c:	08001f85 	.word	0x08001f85
 8001f30:	08001f85 	.word	0x08001f85
 8001f34:	08001f85 	.word	0x08001f85
 8001f38:	08001f73 	.word	0x08001f73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0202 	orr.w	r2, r2, #2
 8001f4a:	60da      	str	r2, [r3, #12]
      break;
 8001f4c:	e01b      	b.n	8001f86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0204 	orr.w	r2, r2, #4
 8001f5c:	60da      	str	r2, [r3, #12]
      break;
 8001f5e:	e012      	b.n	8001f86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0208 	orr.w	r2, r2, #8
 8001f6e:	60da      	str	r2, [r3, #12]
      break;
 8001f70:	e009      	b.n	8001f86 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0210 	orr.w	r2, r2, #16
 8001f80:	60da      	str	r2, [r3, #12]
      break;
 8001f82:	e000      	b.n	8001f86 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8001f84:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f960 	bl	8003254 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d007      	beq.n	8001fb6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d128      	bne.n	8002028 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d121      	bne.n	8002028 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e009      	b.n	8002022 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d128      	bne.n	8002088 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d121      	bne.n	8002088 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e009      	b.n	8002082 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b08      	cmp	r3, #8
 8002094:	d128      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d121      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0208 	mvn.w	r2, #8
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2204      	movs	r2, #4
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
 80020cc:	e009      	b.n	80020e2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d128      	bne.n	8002148 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b10      	cmp	r3, #16
 8002102:	d121      	bne.n	8002148 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e009      	b.n	8002142 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10f      	bne.n	8002176 <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0201 	mvn.w	r2, #1
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d110      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d109      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800219a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d110      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x216>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d109      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x216>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d110      	bne.n	8002206 <HAL_TIM_IRQHandler+0x246>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d109      	bne.n	8002206 <HAL_TIM_IRQHandler+0x246>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f06f 0220 	mvn.w	r2, #32
 80021fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002224:	2302      	movs	r3, #2
 8002226:	e08a      	b.n	800233e <HAL_TIM_IC_ConfigChannel+0x130>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11b      	bne.n	8002276 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f000 fe3d 	bl	8002ecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699a      	ldr	r2, [r3, #24]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 020c 	bic.w	r2, r2, #12
 8002260:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6999      	ldr	r1, [r3, #24]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	619a      	str	r2, [r3, #24]
 8002274:	e05a      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d11c      	bne.n	80022b6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f000 fec1 	bl	8003012 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800229e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6999      	ldr	r1, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	021a      	lsls	r2, r3, #8
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	619a      	str	r2, [r3, #24]
 80022b4:	e03a      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f000 ff0e 	bl	80030ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020c 	bic.w	r2, r2, #12
 80022de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69d9      	ldr	r1, [r3, #28]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	61da      	str	r2, [r3, #28]
 80022f2:	e01b      	b.n	800232c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f000 ff2e 	bl	8003164 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69da      	ldr	r2, [r3, #28]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002316:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69d9      	ldr	r1, [r3, #28]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800235e:	2302      	movs	r3, #2
 8002360:	e0b4      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2202      	movs	r2, #2
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	f200 809f 	bhi.w	80024b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	080023b5 	.word	0x080023b5
 8002384:	080024b9 	.word	0x080024b9
 8002388:	080024b9 	.word	0x080024b9
 800238c:	080024b9 	.word	0x080024b9
 8002390:	080023f5 	.word	0x080023f5
 8002394:	080024b9 	.word	0x080024b9
 8002398:	080024b9 	.word	0x080024b9
 800239c:	080024b9 	.word	0x080024b9
 80023a0:	08002437 	.word	0x08002437
 80023a4:	080024b9 	.word	0x080024b9
 80023a8:	080024b9 	.word	0x080024b9
 80023ac:	080024b9 	.word	0x080024b9
 80023b0:	08002477 	.word	0x08002477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fbd6 	bl	8002b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6999      	ldr	r1, [r3, #24]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
      break;
 80023f2:	e062      	b.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fc26 	bl	8002c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6999      	ldr	r1, [r3, #24]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	021a      	lsls	r2, r3, #8
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	619a      	str	r2, [r3, #24]
      break;
 8002434:	e041      	b.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fc7b 	bl	8002d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0208 	orr.w	r2, r2, #8
 8002450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0204 	bic.w	r2, r2, #4
 8002460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69d9      	ldr	r1, [r3, #28]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	61da      	str	r2, [r3, #28]
      break;
 8002474:	e021      	b.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fccf 	bl	8002e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69d9      	ldr	r1, [r3, #28]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	61da      	str	r2, [r3, #28]
      break;
 80024b6:	e000      	b.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80024b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_ConfigClockSource+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0a6      	b.n	800263a <HAL_TIM_ConfigClockSource+0x166>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800250a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d067      	beq.n	80025f4 <HAL_TIM_ConfigClockSource+0x120>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d80b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x6c>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d073      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x140>
 800252c:	2b10      	cmp	r3, #16
 800252e:	d802      	bhi.n	8002536 <HAL_TIM_ConfigClockSource+0x62>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d06f      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002534:	e078      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002536:	2b20      	cmp	r3, #32
 8002538:	d06c      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x140>
 800253a:	2b30      	cmp	r3, #48	; 0x30
 800253c:	d06a      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800253e:	e073      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d00d      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0x8c>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d804      	bhi.n	8002552 <HAL_TIM_ConfigClockSource+0x7e>
 8002548:	2b50      	cmp	r3, #80	; 0x50
 800254a:	d033      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xe0>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d041      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002550:	e06a      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002556:	d066      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x152>
 8002558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800255c:	d017      	beq.n	800258e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800255e:	e063      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f000 fe50 	bl	8003214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002582:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]
      break;
 800258c:	e04c      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f000 fe39 	bl	8003214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e039      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f000 fcf7 	bl	8002fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2150      	movs	r1, #80	; 0x50
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fe06 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 80025d2:	e029      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f000 fd53 	bl	800308c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2160      	movs	r1, #96	; 0x60
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fdf6 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 80025f2:	e019      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	461a      	mov	r2, r3
 8002602:	f000 fcd7 	bl	8002fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fde6 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 8002612:	e009      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	4610      	mov	r0, r2
 8002620:	f000 fddd 	bl	80031de <TIM_ITRx_SetConfig>
      break;
 8002624:	e000      	b.n	8002628 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	d831      	bhi.n	80026bc <HAL_TIM_ReadCapturedValue+0x78>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_TIM_ReadCapturedValue+0x1c>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002695 	.word	0x08002695
 8002664:	080026bd 	.word	0x080026bd
 8002668:	080026bd 	.word	0x080026bd
 800266c:	080026bd 	.word	0x080026bd
 8002670:	0800269f 	.word	0x0800269f
 8002674:	080026bd 	.word	0x080026bd
 8002678:	080026bd 	.word	0x080026bd
 800267c:	080026bd 	.word	0x080026bd
 8002680:	080026a9 	.word	0x080026a9
 8002684:	080026bd 	.word	0x080026bd
 8002688:	080026bd 	.word	0x080026bd
 800268c:	080026bd 	.word	0x080026bd
 8002690:	080026b3 	.word	0x080026b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	60fb      	str	r3, [r7, #12]

      break;
 800269c:	e00f      	b.n	80026be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	60fb      	str	r3, [r7, #12]

      break;
 80026a6:	e00a      	b.n	80026be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	60fb      	str	r3, [r7, #12]

      break;
 80026b0:	e005      	b.n	80026be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	60fb      	str	r3, [r7, #12]

      break;
 80026ba:	e000      	b.n	80026be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80026bc:	bf00      	nop
  }

  return tmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	460b      	mov	r3, r1
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e136      	b.n	8002a1e <HAL_TIM_RegisterCallback+0x28a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_TIM_RegisterCallback+0x2a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e12f      	b.n	8002a1e <HAL_TIM_RegisterCallback+0x28a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	f040 80b9 	bne.w	8002946 <HAL_TIM_RegisterCallback+0x1b2>
  {
    switch (CallbackID)
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	2b1a      	cmp	r3, #26
 80027d8:	f200 80b1 	bhi.w	800293e <HAL_TIM_RegisterCallback+0x1aa>
 80027dc:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <HAL_TIM_RegisterCallback+0x50>)
 80027de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e2:	bf00      	nop
 80027e4:	08002851 	.word	0x08002851
 80027e8:	08002859 	.word	0x08002859
 80027ec:	08002861 	.word	0x08002861
 80027f0:	08002869 	.word	0x08002869
 80027f4:	08002871 	.word	0x08002871
 80027f8:	08002879 	.word	0x08002879
 80027fc:	08002881 	.word	0x08002881
 8002800:	08002889 	.word	0x08002889
 8002804:	08002891 	.word	0x08002891
 8002808:	08002899 	.word	0x08002899
 800280c:	080028a1 	.word	0x080028a1
 8002810:	080028a9 	.word	0x080028a9
 8002814:	080028b1 	.word	0x080028b1
 8002818:	080028b9 	.word	0x080028b9
 800281c:	080028c1 	.word	0x080028c1
 8002820:	080028c9 	.word	0x080028c9
 8002824:	080028d1 	.word	0x080028d1
 8002828:	080028db 	.word	0x080028db
 800282c:	080028e5 	.word	0x080028e5
 8002830:	080028ef 	.word	0x080028ef
 8002834:	080028f9 	.word	0x080028f9
 8002838:	08002903 	.word	0x08002903
 800283c:	0800290d 	.word	0x0800290d
 8002840:	08002917 	.word	0x08002917
 8002844:	08002921 	.word	0x08002921
 8002848:	0800292b 	.word	0x0800292b
 800284c:	08002935 	.word	0x08002935
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8002856:	e0dd      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800285e:	e0d9      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002866:	e0d5      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800286e:	e0d1      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002876:	e0cd      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800287e:	e0c9      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002886:	e0c5      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800288e:	e0c1      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002896:	e0bd      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800289e:	e0b9      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80028a6:	e0b5      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80028ae:	e0b1      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80028b6:	e0ad      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80028be:	e0a9      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80028c6:	e0a5      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80028ce:	e0a1      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80028d8:	e09c      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80028e2:	e097      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80028ec:	e092      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80028f6:	e08d      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8002900:	e088      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800290a:	e083      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8002914:	e07e      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800291e:	e079      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8002928:	e074      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8002932:	e06f      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800293c:	e06a      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
        break;
 8002942:	bf00      	nop
 8002944:	e066      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d15e      	bne.n	8002a10 <HAL_TIM_RegisterCallback+0x27c>
  {
    switch (CallbackID)
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b0d      	cmp	r3, #13
 8002956:	d857      	bhi.n	8002a08 <HAL_TIM_RegisterCallback+0x274>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <HAL_TIM_RegisterCallback+0x1cc>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002999 	.word	0x08002999
 8002964:	080029a1 	.word	0x080029a1
 8002968:	080029a9 	.word	0x080029a9
 800296c:	080029b1 	.word	0x080029b1
 8002970:	080029b9 	.word	0x080029b9
 8002974:	080029c1 	.word	0x080029c1
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029d1 	.word	0x080029d1
 8002980:	080029d9 	.word	0x080029d9
 8002984:	080029e1 	.word	0x080029e1
 8002988:	080029e9 	.word	0x080029e9
 800298c:	080029f1 	.word	0x080029f1
 8002990:	080029f9 	.word	0x080029f9
 8002994:	08002a01 	.word	0x08002a01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800299e:	e039      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80029a6:	e035      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80029ae:	e031      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80029b6:	e02d      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80029be:	e029      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80029c6:	e025      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80029ce:	e021      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80029d6:	e01d      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80029de:	e019      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80029e6:	e015      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80029ee:	e011      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80029f6:	e00d      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80029fe:	e009      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
        break;
 8002a0c:	bf00      	nop
 8002a0e:	e001      	b.n	8002a14 <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a40      	ldr	r2, [pc, #256]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d00f      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3c      	ldr	r2, [pc, #240]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d027      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2c      	ldr	r2, [pc, #176]	; (8002b44 <TIM_Base_SetConfig+0x118>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d023      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0x11c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <TIM_Base_SetConfig+0x120>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d017      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <TIM_Base_SetConfig+0x128>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <TIM_Base_SetConfig+0x12c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00f      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <TIM_Base_SetConfig+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <TIM_Base_SetConfig+0x134>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <TIM_Base_SetConfig+0x138>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d003      	beq.n	8002ade <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a23      	ldr	r2, [pc, #140]	; (8002b68 <TIM_Base_SetConfig+0x13c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d108      	bne.n	8002af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <TIM_Base_SetConfig+0x114>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0xf8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <TIM_Base_SetConfig+0x124>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40010400 	.word	0x40010400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	40001800 	.word	0x40001800
 8002b64:	40001c00 	.word	0x40001c00
 8002b68:	40002000 	.word	0x40002000

08002b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0201 	bic.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f023 0302 	bic.w	r3, r3, #2
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <TIM_OC1_SetConfig+0xd8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_OC1_SetConfig+0x64>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <TIM_OC1_SetConfig+0xdc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10c      	bne.n	8002bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0308 	bic.w	r3, r3, #8
 8002bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <TIM_OC1_SetConfig+0xd8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_OC1_SetConfig+0x8e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <TIM_OC1_SetConfig+0xdc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d111      	bne.n	8002c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010400 	.word	0x40010400

08002c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	f023 0210 	bic.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0320 	bic.w	r3, r3, #32
 8002c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <TIM_OC2_SetConfig+0xe4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_OC2_SetConfig+0x68>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <TIM_OC2_SetConfig+0xe8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10d      	bne.n	8002cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <TIM_OC2_SetConfig+0xe4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <TIM_OC2_SetConfig+0x94>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <TIM_OC2_SetConfig+0xe8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d113      	bne.n	8002d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40010400 	.word	0x40010400

08002d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <TIM_OC3_SetConfig+0xe0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d003      	beq.n	8002d9e <TIM_OC3_SetConfig+0x66>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <TIM_OC3_SetConfig+0xe4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10d      	bne.n	8002dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <TIM_OC3_SetConfig+0xe0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_OC3_SetConfig+0x92>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <TIM_OC3_SetConfig+0xe4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d113      	bne.n	8002df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400

08002e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	031b      	lsls	r3, r3, #12
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <TIM_OC4_SetConfig+0xa4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <TIM_OC4_SetConfig+0x68>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a11      	ldr	r2, [pc, #68]	; (8002ec8 <TIM_OC4_SetConfig+0xa8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d109      	bne.n	8002e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000
 8002ec8:	40010400 	.word	0x40010400

08002ecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <TIM_TI1_SetConfig+0xcc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01b      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d017      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a25      	ldr	r2, [pc, #148]	; (8002f9c <TIM_TI1_SetConfig+0xd0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <TIM_TI1_SetConfig+0xd4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00f      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <TIM_TI1_SetConfig+0xd8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <TIM_TI1_SetConfig+0xdc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a21      	ldr	r2, [pc, #132]	; (8002fac <TIM_TI1_SetConfig+0xe0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_TI1_SetConfig+0x66>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <TIM_TI1_SetConfig+0xe4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <TIM_TI1_SetConfig+0x6a>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <TIM_TI1_SetConfig+0x6c>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0303 	bic.w	r3, r3, #3
 8002f42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e003      	b.n	8002f56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f023 030a 	bic.w	r3, r3, #10
 8002f70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 030a 	and.w	r3, r3, #10
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40010400 	.word	0x40010400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40001800 	.word	0x40001800

08002fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 030a 	bic.w	r3, r3, #10
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	621a      	str	r2, [r3, #32]
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003012:	b480      	push	{r7}
 8003014:	b087      	sub	sp, #28
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f023 0210 	bic.w	r2, r3, #16
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	b29b      	uxth	r3, r3
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003064:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 0210 	bic.w	r2, r3, #16
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	031b      	lsls	r3, r3, #12
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f023 0303 	bic.w	r3, r3, #3
 8003118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	b2db      	uxtb	r3, r3
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800313c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	031b      	lsls	r3, r3, #12
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	031b      	lsls	r3, r3, #12
 80031bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f043 0307 	orr.w	r3, r3, #7
 8003200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	609a      	str	r2, [r3, #8]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	021a      	lsls	r2, r3, #8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	431a      	orrs	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2201      	movs	r2, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	43db      	mvns	r3, r3
 8003276:	401a      	ands	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1a      	ldr	r2, [r3, #32]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <TIM_ResetCallback+0x78>)
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	; (800331c <TIM_ResetCallback+0x7c>)
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <TIM_ResetCallback+0x80>)
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a19      	ldr	r2, [pc, #100]	; (8003324 <TIM_ResetCallback+0x84>)
 80032c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <TIM_ResetCallback+0x88>)
 80032c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <TIM_ResetCallback+0x8c>)
 80032d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <TIM_ResetCallback+0x90>)
 80032d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a15      	ldr	r2, [pc, #84]	; (8003334 <TIM_ResetCallback+0x94>)
 80032e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a14      	ldr	r2, [pc, #80]	; (8003338 <TIM_ResetCallback+0x98>)
 80032e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <TIM_ResetCallback+0x9c>)
 80032f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <TIM_ResetCallback+0xa0>)
 80032f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a11      	ldr	r2, [pc, #68]	; (8003344 <TIM_ResetCallback+0xa4>)
 8003300:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a10      	ldr	r2, [pc, #64]	; (8003348 <TIM_ResetCallback+0xa8>)
 8003308:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	080026cd 	.word	0x080026cd
 800331c:	080026e1 	.word	0x080026e1
 8003320:	08002759 	.word	0x08002759
 8003324:	0800276d 	.word	0x0800276d
 8003328:	08002709 	.word	0x08002709
 800332c:	0800271d 	.word	0x0800271d
 8003330:	080026f5 	.word	0x080026f5
 8003334:	08002731 	.word	0x08002731
 8003338:	08002745 	.word	0x08002745
 800333c:	08002781 	.word	0x08002781
 8003340:	08003445 	.word	0x08003445
 8003344:	08003459 	.word	0x08003459
 8003348:	0800346d 	.word	0x0800346d

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e05a      	b.n	800341a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d01d      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1a      	ldr	r2, [pc, #104]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a17      	ldr	r2, [pc, #92]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10c      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40000c00 	.word	0x40000c00
 8003438:	40010400 	.word	0x40010400
 800343c:	40014000 	.word	0x40014000
 8003440:	40001800 	.word	0x40001800

08003444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e03f      	b.n	8003512 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fbca 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f90b 	bl	80036e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b088      	sub	sp, #32
 800351e:	af02      	add	r7, sp, #8
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 8083 	bne.w	8003642 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_Transmit+0x2e>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e07b      	b.n	8003644 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x40>
 8003556:	2302      	movs	r3, #2
 8003558:	e074      	b.n	8003644 <HAL_UART_Transmit+0x12a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2221      	movs	r2, #33	; 0x21
 800356c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003570:	f7fd fc88 	bl	8000e84 <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	88fa      	ldrh	r2, [r7, #6]
 8003580:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800358a:	e042      	b.n	8003612 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d122      	bne.n	80035ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2200      	movs	r2, #0
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f84c 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e042      	b.n	8003644 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3302      	adds	r3, #2
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	e017      	b.n	8003612 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	e013      	b.n	8003612 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f829 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e01f      	b.n	8003644 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	60ba      	str	r2, [r7, #8]
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1b7      	bne.n	800358c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2200      	movs	r2, #0
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f810 	bl	800364c <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e006      	b.n	8003644 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365c:	e02c      	b.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d028      	beq.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0x30>
 800366c:	f7fd fc0a 	bl	8000e84 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	429a      	cmp	r2, r3
 800367a:	d21d      	bcs.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800368a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e00f      	b.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d0c3      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003722:	f023 030c 	bic.w	r3, r3, #12
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	430b      	orrs	r3, r1
 800372e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374e:	f040 818b 	bne.w	8003a68 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4ac1      	ldr	r2, [pc, #772]	; (8003a5c <UART_SetConfig+0x37c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d005      	beq.n	8003768 <UART_SetConfig+0x88>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4abf      	ldr	r2, [pc, #764]	; (8003a60 <UART_SetConfig+0x380>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f040 80bd 	bne.w	80038e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7fe fab4 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 800376c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	461d      	mov	r5, r3
 8003772:	f04f 0600 	mov.w	r6, #0
 8003776:	46a8      	mov	r8, r5
 8003778:	46b1      	mov	r9, r6
 800377a:	eb18 0308 	adds.w	r3, r8, r8
 800377e:	eb49 0409 	adc.w	r4, r9, r9
 8003782:	4698      	mov	r8, r3
 8003784:	46a1      	mov	r9, r4
 8003786:	eb18 0805 	adds.w	r8, r8, r5
 800378a:	eb49 0906 	adc.w	r9, r9, r6
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800379a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800379e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037a2:	4688      	mov	r8, r1
 80037a4:	4691      	mov	r9, r2
 80037a6:	eb18 0005 	adds.w	r0, r8, r5
 80037aa:	eb49 0106 	adc.w	r1, r9, r6
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	461d      	mov	r5, r3
 80037b4:	f04f 0600 	mov.w	r6, #0
 80037b8:	196b      	adds	r3, r5, r5
 80037ba:	eb46 0406 	adc.w	r4, r6, r6
 80037be:	461a      	mov	r2, r3
 80037c0:	4623      	mov	r3, r4
 80037c2:	f7fc fd01 	bl	80001c8 <__aeabi_uldivmod>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	461a      	mov	r2, r3
 80037cc:	4ba5      	ldr	r3, [pc, #660]	; (8003a64 <UART_SetConfig+0x384>)
 80037ce:	fba3 2302 	umull	r2, r3, r3, r2
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	461d      	mov	r5, r3
 80037dc:	f04f 0600 	mov.w	r6, #0
 80037e0:	46a9      	mov	r9, r5
 80037e2:	46b2      	mov	sl, r6
 80037e4:	eb19 0309 	adds.w	r3, r9, r9
 80037e8:	eb4a 040a 	adc.w	r4, sl, sl
 80037ec:	4699      	mov	r9, r3
 80037ee:	46a2      	mov	sl, r4
 80037f0:	eb19 0905 	adds.w	r9, r9, r5
 80037f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800380c:	4689      	mov	r9, r1
 800380e:	4692      	mov	sl, r2
 8003810:	eb19 0005 	adds.w	r0, r9, r5
 8003814:	eb4a 0106 	adc.w	r1, sl, r6
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	461d      	mov	r5, r3
 800381e:	f04f 0600 	mov.w	r6, #0
 8003822:	196b      	adds	r3, r5, r5
 8003824:	eb46 0406 	adc.w	r4, r6, r6
 8003828:	461a      	mov	r2, r3
 800382a:	4623      	mov	r3, r4
 800382c:	f7fc fccc 	bl	80001c8 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	461a      	mov	r2, r3
 8003836:	4b8b      	ldr	r3, [pc, #556]	; (8003a64 <UART_SetConfig+0x384>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a86      	ldr	r2, [pc, #536]	; (8003a64 <UART_SetConfig+0x384>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003858:	4498      	add	r8, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	461d      	mov	r5, r3
 800385e:	f04f 0600 	mov.w	r6, #0
 8003862:	46a9      	mov	r9, r5
 8003864:	46b2      	mov	sl, r6
 8003866:	eb19 0309 	adds.w	r3, r9, r9
 800386a:	eb4a 040a 	adc.w	r4, sl, sl
 800386e:	4699      	mov	r9, r3
 8003870:	46a2      	mov	sl, r4
 8003872:	eb19 0905 	adds.w	r9, r9, r5
 8003876:	eb4a 0a06 	adc.w	sl, sl, r6
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800388a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800388e:	4689      	mov	r9, r1
 8003890:	4692      	mov	sl, r2
 8003892:	eb19 0005 	adds.w	r0, r9, r5
 8003896:	eb4a 0106 	adc.w	r1, sl, r6
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	461d      	mov	r5, r3
 80038a0:	f04f 0600 	mov.w	r6, #0
 80038a4:	196b      	adds	r3, r5, r5
 80038a6:	eb46 0406 	adc.w	r4, r6, r6
 80038aa:	461a      	mov	r2, r3
 80038ac:	4623      	mov	r3, r4
 80038ae:	f7fc fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	461a      	mov	r2, r3
 80038b8:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <UART_SetConfig+0x384>)
 80038ba:	fba3 1302 	umull	r1, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2164      	movs	r1, #100	; 0x64
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	3332      	adds	r3, #50	; 0x32
 80038cc:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <UART_SetConfig+0x384>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	f003 0207 	and.w	r2, r3, #7
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4442      	add	r2, r8
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	e26f      	b.n	8003dc2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7fe f9e3 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80038e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	461d      	mov	r5, r3
 80038ec:	f04f 0600 	mov.w	r6, #0
 80038f0:	46a8      	mov	r8, r5
 80038f2:	46b1      	mov	r9, r6
 80038f4:	eb18 0308 	adds.w	r3, r8, r8
 80038f8:	eb49 0409 	adc.w	r4, r9, r9
 80038fc:	4698      	mov	r8, r3
 80038fe:	46a1      	mov	r9, r4
 8003900:	eb18 0805 	adds.w	r8, r8, r5
 8003904:	eb49 0906 	adc.w	r9, r9, r6
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003914:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003918:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800391c:	4688      	mov	r8, r1
 800391e:	4691      	mov	r9, r2
 8003920:	eb18 0005 	adds.w	r0, r8, r5
 8003924:	eb49 0106 	adc.w	r1, r9, r6
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	461d      	mov	r5, r3
 800392e:	f04f 0600 	mov.w	r6, #0
 8003932:	196b      	adds	r3, r5, r5
 8003934:	eb46 0406 	adc.w	r4, r6, r6
 8003938:	461a      	mov	r2, r3
 800393a:	4623      	mov	r3, r4
 800393c:	f7fc fc44 	bl	80001c8 <__aeabi_uldivmod>
 8003940:	4603      	mov	r3, r0
 8003942:	460c      	mov	r4, r1
 8003944:	461a      	mov	r2, r3
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <UART_SetConfig+0x384>)
 8003948:	fba3 2302 	umull	r2, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	461d      	mov	r5, r3
 8003956:	f04f 0600 	mov.w	r6, #0
 800395a:	46a9      	mov	r9, r5
 800395c:	46b2      	mov	sl, r6
 800395e:	eb19 0309 	adds.w	r3, r9, r9
 8003962:	eb4a 040a 	adc.w	r4, sl, sl
 8003966:	4699      	mov	r9, r3
 8003968:	46a2      	mov	sl, r4
 800396a:	eb19 0905 	adds.w	r9, r9, r5
 800396e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800397e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003982:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003986:	4689      	mov	r9, r1
 8003988:	4692      	mov	sl, r2
 800398a:	eb19 0005 	adds.w	r0, r9, r5
 800398e:	eb4a 0106 	adc.w	r1, sl, r6
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	461d      	mov	r5, r3
 8003998:	f04f 0600 	mov.w	r6, #0
 800399c:	196b      	adds	r3, r5, r5
 800399e:	eb46 0406 	adc.w	r4, r6, r6
 80039a2:	461a      	mov	r2, r3
 80039a4:	4623      	mov	r3, r4
 80039a6:	f7fc fc0f 	bl	80001c8 <__aeabi_uldivmod>
 80039aa:	4603      	mov	r3, r0
 80039ac:	460c      	mov	r4, r1
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <UART_SetConfig+0x384>)
 80039b2:	fba3 1302 	umull	r1, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2164      	movs	r1, #100	; 0x64
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <UART_SetConfig+0x384>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039d2:	4498      	add	r8, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	461d      	mov	r5, r3
 80039d8:	f04f 0600 	mov.w	r6, #0
 80039dc:	46a9      	mov	r9, r5
 80039de:	46b2      	mov	sl, r6
 80039e0:	eb19 0309 	adds.w	r3, r9, r9
 80039e4:	eb4a 040a 	adc.w	r4, sl, sl
 80039e8:	4699      	mov	r9, r3
 80039ea:	46a2      	mov	sl, r4
 80039ec:	eb19 0905 	adds.w	r9, r9, r5
 80039f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a08:	4689      	mov	r9, r1
 8003a0a:	4692      	mov	sl, r2
 8003a0c:	eb19 0005 	adds.w	r0, r9, r5
 8003a10:	eb4a 0106 	adc.w	r1, sl, r6
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	461d      	mov	r5, r3
 8003a1a:	f04f 0600 	mov.w	r6, #0
 8003a1e:	196b      	adds	r3, r5, r5
 8003a20:	eb46 0406 	adc.w	r4, r6, r6
 8003a24:	461a      	mov	r2, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	f7fc fbce 	bl	80001c8 <__aeabi_uldivmod>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <UART_SetConfig+0x384>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <UART_SetConfig+0x384>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4442      	add	r2, r8
 8003a58:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a5a:	e1b2      	b.n	8003dc2 <UART_SetConfig+0x6e2>
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	40011400 	.word	0x40011400
 8003a64:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4ad7      	ldr	r2, [pc, #860]	; (8003dcc <UART_SetConfig+0x6ec>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d005      	beq.n	8003a7e <UART_SetConfig+0x39e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4ad6      	ldr	r2, [pc, #856]	; (8003dd0 <UART_SetConfig+0x6f0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	f040 80d1 	bne.w	8003c20 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a7e:	f7fe f929 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8003a82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	469a      	mov	sl, r3
 8003a88:	f04f 0b00 	mov.w	fp, #0
 8003a8c:	46d0      	mov	r8, sl
 8003a8e:	46d9      	mov	r9, fp
 8003a90:	eb18 0308 	adds.w	r3, r8, r8
 8003a94:	eb49 0409 	adc.w	r4, r9, r9
 8003a98:	4698      	mov	r8, r3
 8003a9a:	46a1      	mov	r9, r4
 8003a9c:	eb18 080a 	adds.w	r8, r8, sl
 8003aa0:	eb49 090b 	adc.w	r9, r9, fp
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ab0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ab4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ab8:	4688      	mov	r8, r1
 8003aba:	4691      	mov	r9, r2
 8003abc:	eb1a 0508 	adds.w	r5, sl, r8
 8003ac0:	eb4b 0609 	adc.w	r6, fp, r9
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f04f 0400 	mov.w	r4, #0
 8003ad6:	0094      	lsls	r4, r2, #2
 8003ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003adc:	008b      	lsls	r3, r1, #2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	f7fc fb6f 	bl	80001c8 <__aeabi_uldivmod>
 8003aea:	4603      	mov	r3, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	461a      	mov	r2, r3
 8003af0:	4bb8      	ldr	r3, [pc, #736]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	469b      	mov	fp, r3
 8003b00:	f04f 0c00 	mov.w	ip, #0
 8003b04:	46d9      	mov	r9, fp
 8003b06:	46e2      	mov	sl, ip
 8003b08:	eb19 0309 	adds.w	r3, r9, r9
 8003b0c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b10:	4699      	mov	r9, r3
 8003b12:	46a2      	mov	sl, r4
 8003b14:	eb19 090b 	adds.w	r9, r9, fp
 8003b18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b30:	4689      	mov	r9, r1
 8003b32:	4692      	mov	sl, r2
 8003b34:	eb1b 0509 	adds.w	r5, fp, r9
 8003b38:	eb4c 060a 	adc.w	r6, ip, sl
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	f04f 0400 	mov.w	r4, #0
 8003b4e:	0094      	lsls	r4, r2, #2
 8003b50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b54:	008b      	lsls	r3, r1, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	f7fc fb33 	bl	80001c8 <__aeabi_uldivmod>
 8003b62:	4603      	mov	r3, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b9a      	ldr	r3, [pc, #616]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2164      	movs	r1, #100	; 0x64
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	3332      	adds	r3, #50	; 0x32
 8003b7c:	4a95      	ldr	r2, [pc, #596]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	4498      	add	r8, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	469b      	mov	fp, r3
 8003b8e:	f04f 0c00 	mov.w	ip, #0
 8003b92:	46d9      	mov	r9, fp
 8003b94:	46e2      	mov	sl, ip
 8003b96:	eb19 0309 	adds.w	r3, r9, r9
 8003b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b9e:	4699      	mov	r9, r3
 8003ba0:	46a2      	mov	sl, r4
 8003ba2:	eb19 090b 	adds.w	r9, r9, fp
 8003ba6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bbe:	4689      	mov	r9, r1
 8003bc0:	4692      	mov	sl, r2
 8003bc2:	eb1b 0509 	adds.w	r5, fp, r9
 8003bc6:	eb4c 060a 	adc.w	r6, ip, sl
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	0094      	lsls	r4, r2, #2
 8003bde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be2:	008b      	lsls	r3, r1, #2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	4631      	mov	r1, r6
 8003bec:	f7fc faec 	bl	80001c8 <__aeabi_uldivmod>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	; 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	3332      	adds	r3, #50	; 0x32
 8003c0a:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 020f 	and.w	r2, r3, #15
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4442      	add	r2, r8
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	e0d0      	b.n	8003dc2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe f844 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8003c24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	469a      	mov	sl, r3
 8003c2a:	f04f 0b00 	mov.w	fp, #0
 8003c2e:	46d0      	mov	r8, sl
 8003c30:	46d9      	mov	r9, fp
 8003c32:	eb18 0308 	adds.w	r3, r8, r8
 8003c36:	eb49 0409 	adc.w	r4, r9, r9
 8003c3a:	4698      	mov	r8, r3
 8003c3c:	46a1      	mov	r9, r4
 8003c3e:	eb18 080a 	adds.w	r8, r8, sl
 8003c42:	eb49 090b 	adc.w	r9, r9, fp
 8003c46:	f04f 0100 	mov.w	r1, #0
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c5a:	4688      	mov	r8, r1
 8003c5c:	4691      	mov	r9, r2
 8003c5e:	eb1a 0508 	adds.w	r5, sl, r8
 8003c62:	eb4b 0609 	adc.w	r6, fp, r9
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	0094      	lsls	r4, r2, #2
 8003c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c7e:	008b      	lsls	r3, r1, #2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	4628      	mov	r0, r5
 8003c86:	4631      	mov	r1, r6
 8003c88:	f7fc fa9e 	bl	80001c8 <__aeabi_uldivmod>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003c94:	fba3 2302 	umull	r2, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	469b      	mov	fp, r3
 8003ca2:	f04f 0c00 	mov.w	ip, #0
 8003ca6:	46d9      	mov	r9, fp
 8003ca8:	46e2      	mov	sl, ip
 8003caa:	eb19 0309 	adds.w	r3, r9, r9
 8003cae:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	46a2      	mov	sl, r4
 8003cb6:	eb19 090b 	adds.w	r9, r9, fp
 8003cba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	4692      	mov	sl, r2
 8003cd6:	eb1b 0509 	adds.w	r5, fp, r9
 8003cda:	eb4c 060a 	adc.w	r6, ip, sl
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	f04f 0400 	mov.w	r4, #0
 8003cf0:	0094      	lsls	r4, r2, #2
 8003cf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf6:	008b      	lsls	r3, r1, #2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	4631      	mov	r1, r6
 8003d00:	f7fc fa62 	bl	80001c8 <__aeabi_uldivmod>
 8003d04:	4603      	mov	r3, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2a:	4498      	add	r8, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	469b      	mov	fp, r3
 8003d30:	f04f 0c00 	mov.w	ip, #0
 8003d34:	46d9      	mov	r9, fp
 8003d36:	46e2      	mov	sl, ip
 8003d38:	eb19 0309 	adds.w	r3, r9, r9
 8003d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d40:	4699      	mov	r9, r3
 8003d42:	46a2      	mov	sl, r4
 8003d44:	eb19 090b 	adds.w	r9, r9, fp
 8003d48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d60:	4689      	mov	r9, r1
 8003d62:	4692      	mov	sl, r2
 8003d64:	eb1b 0509 	adds.w	r5, fp, r9
 8003d68:	eb4c 060a 	adc.w	r6, ip, sl
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	f04f 0400 	mov.w	r4, #0
 8003d7e:	0094      	lsls	r4, r2, #2
 8003d80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d84:	008b      	lsls	r3, r1, #2
 8003d86:	461a      	mov	r2, r3
 8003d88:	4623      	mov	r3, r4
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	f7fc fa1b 	bl	80001c8 <__aeabi_uldivmod>
 8003d92:	4603      	mov	r3, r0
 8003d94:	460c      	mov	r4, r1
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2164      	movs	r1, #100	; 0x64
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	; 0x32
 8003dac:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <UART_SetConfig+0x6f4>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4442      	add	r2, r8
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	e7ff      	b.n	8003dc2 <UART_SetConfig+0x6e2>
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dcc:	40011000 	.word	0x40011000
 8003dd0:	40011400 	.word	0x40011400
 8003dd4:	51eb851f 	.word	0x51eb851f

08003dd8 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth>:
 *      Author: foton
 */

#include "PWMCapturer.h"

PWMCapturer::PWMCapturer(TIM_HandleTypeDef *htim,
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	460b      	mov	r3, r1
 8003de8:	71fb      	strb	r3, [r7, #7]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80bb      	strh	r3, [r7, #4]
		uint8_t channel,
		uint16_t min_value,
		uint16_t mid_value,
		uint16_t max_value,
		uint8_t measurement_error)
 8003dee:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xb8>)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	809a      	strh	r2, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	80da      	strh	r2, [r3, #6]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	811a      	strh	r2, [r3, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	761a      	strb	r2, [r3, #24]
{
	this->min_value = min_value;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88ba      	ldrh	r2, [r7, #4]
 8003e22:	811a      	strh	r2, [r3, #8]
	this->max_value = max_value;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8bba      	ldrh	r2, [r7, #28]
 8003e28:	809a      	strh	r2, [r3, #4]
	this->mid_value = mid_value;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8b3a      	ldrh	r2, [r7, #24]
 8003e2e:	80da      	strh	r2, [r3, #6]
	this->measurement_error = measurement_error;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	this->htim = htim;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	621a      	str	r2, [r3, #32]
	switch(channel)
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d81b      	bhi.n	8003e80 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0x78>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e79 	.word	0x08003e79
	{
		case 1:
			this->channel = TIM_CHANNEL_1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
			break;
 8003e66:	e00b      	b.n	8003e80 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 2:
			this->channel = TIM_CHANNEL_2;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	61da      	str	r2, [r3, #28]
			break;
 8003e6e:	e007      	b.n	8003e80 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 3:
			this->channel = TIM_CHANNEL_3;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2208      	movs	r2, #8
 8003e74:	61da      	str	r2, [r3, #28]
			break;
 8003e76:	e003      	b.n	8003e80 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 4:
			this->channel = TIM_CHANNEL_4;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	61da      	str	r2, [r3, #28]
			break;
 8003e7e:	bf00      	nop
	}
}
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	080043b4 	.word	0x080043b4

08003e94 <_ZN11PWMCapturerD1Ev>:
		uint16_t max_value,
		uint8_t measurement_error)
	: PWMCapturer(htim, channel, min_value, min_value + (max_value - min_value)/2, max_value, measurement_error)
{}

PWMCapturer::~PWMCapturer() {
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <_ZN11PWMCapturerD1Ev+0x1c>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	080043b4 	.word	0x080043b4

08003eb4 <_ZN11PWMCapturerD0Ev>:
PWMCapturer::~PWMCapturer() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
}
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ffe9 	bl	8003e94 <_ZN11PWMCapturerD1Ev>
 8003ec2:	2128      	movs	r1, #40	; 0x28
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f985 	bl	80041d4 <_ZdlPvj>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZN11PWMCapturer13getPulseWidthEv>:

uint32_t PWMCapturer::getPulseWidth()
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	return difference;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_ZN11PWMCapturer19calculatePulseWidthEv>:
{
	return mid_value;
}

void PWMCapturer::calculatePulseWidth()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	if(!is_First_Captured) //if the first value is not captured
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7e1b      	ldrb	r3, [r3, #24]
 8003ef8:	f083 0301 	eor.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d07c      	beq.n	8003ffc <_ZN11PWMCapturer19calculatePulseWidthEv+0x110>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, channel); //read the first value
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fe fb99 	bl	8002644 <HAL_TIM_ReadCapturedValue>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60da      	str	r2, [r3, #12]
		is_First_Captured = true;  //set the first captured as true
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	761a      	strb	r2, [r3, #24]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <_ZN11PWMCapturer19calculatePulseWidthEv+0x50>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 020a 	bic.w	r2, r2, #10
 8003f38:	621a      	str	r2, [r3, #32]
 8003f3a:	e027      	b.n	8003f8c <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d10a      	bne.n	8003f5a <_ZN11PWMCapturer19calculatePulseWidthEv+0x6e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	e018      	b.n	8003f8c <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d10a      	bne.n	8003f78 <_ZN11PWMCapturer19calculatePulseWidthEv+0x8c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8003f74:	621a      	str	r2, [r3, #32]
 8003f76:	e009      	b.n	8003f8c <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1a      	ldr	r2, [r3, #32]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8003f8a:	621a      	str	r2, [r3, #32]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <_ZN11PWMCapturer19calculatePulseWidthEv+0xbe>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0202 	orr.w	r2, r2, #2
 8003fa6:	621a      	str	r2, [r3, #32]
			difference = IC_Val2 - IC_Val1;

		is_First_Captured = false; //set it back to false
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
	}
}
 8003fa8:	e0a9      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d10a      	bne.n	8003fc8 <_ZN11PWMCapturer19calculatePulseWidthEv+0xdc>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6a1a      	ldr	r2, [r3, #32]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0220 	orr.w	r2, r2, #32
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	e09a      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d10a      	bne.n	8003fe6 <_ZN11PWMCapturer19calculatePulseWidthEv+0xfa>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	e08b      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	e080      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, channel);  //read second value
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fb1c 	bl	8002644 <HAL_TIM_ReadCapturedValue>
 800400c:	4602      	mov	r2, r0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]
		if (IC_Val2 > IC_Val1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	429a      	cmp	r2, r3
 800401c:	d906      	bls.n	800402c <_ZN11PWMCapturer19calculatePulseWidthEv+0x140>
			difference = IC_Val2 - IC_Val1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	615a      	str	r2, [r3, #20]
		is_First_Captured = false; //set it back to false
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	761a      	strb	r2, [r3, #24]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <_ZN11PWMCapturer19calculatePulseWidthEv+0x164>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020a 	bic.w	r2, r2, #10
 800404c:	621a      	str	r2, [r3, #32]
 800404e:	e027      	b.n	80040a0 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d10a      	bne.n	800406e <_ZN11PWMCapturer19calculatePulseWidthEv+0x182>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800406a:	621a      	str	r2, [r3, #32]
 800406c:	e018      	b.n	80040a0 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d10a      	bne.n	800408c <_ZN11PWMCapturer19calculatePulseWidthEv+0x1a0>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8004088:	621a      	str	r2, [r3, #32]
 800408a:	e009      	b.n	80040a0 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1a      	ldr	r2, [r3, #32]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 800409e:	621a      	str	r2, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d108      	bne.n	80040ba <_ZN11PWMCapturer19calculatePulseWidthEv+0x1ce>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a12      	ldr	r2, [r2, #32]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	e021      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d108      	bne.n	80040d4 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1e8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a12      	ldr	r2, [r2, #32]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	e014      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d108      	bne.n	80040ee <_ZN11PWMCapturer19calculatePulseWidthEv+0x202>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a12      	ldr	r2, [r2, #32]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	e007      	b.n	80040fe <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a12      	ldr	r2, [r2, #32]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_ZN5ServoC1EP11TIM_TypeDefhttt>:
#include "Servo.h"

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel, uint16_t min_PWM_value, uint16_t max_PWM_value, uint16_t max_Angle)
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	4611      	mov	r1, r2
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4613      	mov	r3, r2
 800411a:	80bb      	strh	r3, [r7, #4]
{
	this->TIM = TIM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	605a      	str	r2, [r3, #4]
	this->channel = channel;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	79fa      	ldrb	r2, [r7, #7]
 8004126:	721a      	strb	r2, [r3, #8]
	this->min_PWM_value = min_PWM_value;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	88ba      	ldrh	r2, [r7, #4]
 800412c:	805a      	strh	r2, [r3, #2]
	this->max_PWM_value = max_PWM_value;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8b3a      	ldrh	r2, [r7, #24]
 8004132:	801a      	strh	r2, [r3, #0]
	this->max_Angle = max_Angle;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8bba      	ldrh	r2, [r7, #28]
 8004138:	815a      	strh	r2, [r3, #10]
}
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN5ServoC1EP11TIM_TypeDefh>:

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel, uint16_t min_PWM_value, uint16_t max_PWM_value)
	: Servo(TIM, channel, min_PWM_value, max_PWM_value, 180)
{}

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel)
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
	: Servo(TIM, channel, 0, 0, 0)
 8004156:	79fa      	ldrb	r2, [r7, #7]
 8004158:	2300      	movs	r3, #0
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff ffce 	bl	8004106 <_ZN5ServoC1EP11TIM_TypeDefhttt>
{}
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZN5Servo23setPositionMicroSecondsEm>:

void Servo::setPositionMicroSeconds(uint32_t position)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	switch (this->channel)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7a1b      	ldrb	r3, [r3, #8]
 8004182:	3b01      	subs	r3, #1
 8004184:	2b03      	cmp	r3, #3
 8004186:	d81f      	bhi.n	80041c8 <_ZN5Servo23setPositionMicroSecondsEm+0x54>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <_ZN5Servo23setPositionMicroSecondsEm+0x1c>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041ab 	.word	0x080041ab
 8004198:	080041b5 	.word	0x080041b5
 800419c:	080041bf 	.word	0x080041bf
	{
		case 1:
			this->TIM->CCR1 = position;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80041a8:	e00e      	b.n	80041c8 <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 2:
			this->TIM->CCR2 = position;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80041b2:	e009      	b.n	80041c8 <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 3:
			this->TIM->CCR3 = position;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80041bc:	e004      	b.n	80041c8 <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 4:
			this->TIM->CCR4 = position;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80041c6:	bf00      	nop
	}
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <_ZdlPvj>:
 80041d4:	f000 b800 	b.w	80041d8 <_ZdlPv>

080041d8 <_ZdlPv>:
 80041d8:	f000 b824 	b.w	8004224 <free>

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4e0d      	ldr	r6, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1ba4      	subs	r4, r4, r6
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2500      	movs	r5, #0
 80041e8:	42a5      	cmp	r5, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4e0b      	ldr	r6, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f878 	bl	80042e4 <_init>
 80041f4:	1ba4      	subs	r4, r4, r6
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2500      	movs	r5, #0
 80041fa:	42a5      	cmp	r5, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004204:	4798      	blx	r3
 8004206:	3501      	adds	r5, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800420e:	4798      	blx	r3
 8004210:	3501      	adds	r5, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	080043c4 	.word	0x080043c4
 8004218:	080043c4 	.word	0x080043c4
 800421c:	080043c4 	.word	0x080043c4
 8004220:	080043cc 	.word	0x080043cc

08004224 <free>:
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <free+0xc>)
 8004226:	4601      	mov	r1, r0
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f000 b80b 	b.w	8004244 <_free_r>
 800422e:	bf00      	nop
 8004230:	2000000c 	.word	0x2000000c

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <_free_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	2900      	cmp	r1, #0
 800424a:	d045      	beq.n	80042d8 <_free_r+0x94>
 800424c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004250:	1f0c      	subs	r4, r1, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bfb8      	it	lt
 8004256:	18e4      	addlt	r4, r4, r3
 8004258:	f000 f842 	bl	80042e0 <__malloc_lock>
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <_free_r+0x98>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	4610      	mov	r0, r2
 8004262:	b933      	cbnz	r3, 8004272 <_free_r+0x2e>
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	6014      	str	r4, [r2, #0]
 8004268:	4628      	mov	r0, r5
 800426a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800426e:	f000 b838 	b.w	80042e2 <__malloc_unlock>
 8004272:	42a3      	cmp	r3, r4
 8004274:	d90c      	bls.n	8004290 <_free_r+0x4c>
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	1862      	adds	r2, r4, r1
 800427a:	4293      	cmp	r3, r2
 800427c:	bf04      	itt	eq
 800427e:	681a      	ldreq	r2, [r3, #0]
 8004280:	685b      	ldreq	r3, [r3, #4]
 8004282:	6063      	str	r3, [r4, #4]
 8004284:	bf04      	itt	eq
 8004286:	1852      	addeq	r2, r2, r1
 8004288:	6022      	streq	r2, [r4, #0]
 800428a:	6004      	str	r4, [r0, #0]
 800428c:	e7ec      	b.n	8004268 <_free_r+0x24>
 800428e:	4613      	mov	r3, r2
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	b10a      	cbz	r2, 8004298 <_free_r+0x54>
 8004294:	42a2      	cmp	r2, r4
 8004296:	d9fa      	bls.n	800428e <_free_r+0x4a>
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	1858      	adds	r0, r3, r1
 800429c:	42a0      	cmp	r0, r4
 800429e:	d10b      	bne.n	80042b8 <_free_r+0x74>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	4401      	add	r1, r0
 80042a4:	1858      	adds	r0, r3, r1
 80042a6:	4282      	cmp	r2, r0
 80042a8:	6019      	str	r1, [r3, #0]
 80042aa:	d1dd      	bne.n	8004268 <_free_r+0x24>
 80042ac:	6810      	ldr	r0, [r2, #0]
 80042ae:	6852      	ldr	r2, [r2, #4]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	4401      	add	r1, r0
 80042b4:	6019      	str	r1, [r3, #0]
 80042b6:	e7d7      	b.n	8004268 <_free_r+0x24>
 80042b8:	d902      	bls.n	80042c0 <_free_r+0x7c>
 80042ba:	230c      	movs	r3, #12
 80042bc:	602b      	str	r3, [r5, #0]
 80042be:	e7d3      	b.n	8004268 <_free_r+0x24>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	1821      	adds	r1, r4, r0
 80042c4:	428a      	cmp	r2, r1
 80042c6:	bf04      	itt	eq
 80042c8:	6811      	ldreq	r1, [r2, #0]
 80042ca:	6852      	ldreq	r2, [r2, #4]
 80042cc:	6062      	str	r2, [r4, #4]
 80042ce:	bf04      	itt	eq
 80042d0:	1809      	addeq	r1, r1, r0
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	605c      	str	r4, [r3, #4]
 80042d6:	e7c7      	b.n	8004268 <_free_r+0x24>
 80042d8:	bd38      	pop	{r3, r4, r5, pc}
 80042da:	bf00      	nop
 80042dc:	200001c8 	.word	0x200001c8

080042e0 <__malloc_lock>:
 80042e0:	4770      	bx	lr

080042e2 <__malloc_unlock>:
 80042e2:	4770      	bx	lr

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
