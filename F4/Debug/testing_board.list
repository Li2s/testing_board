
testing_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052dc  080052dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e4  080052e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08005364  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08005364  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d484  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb4  00000000  00000000  0002d524  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a70  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094ed  00000000  00000000  00054590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd4a5  00000000  00000000  0005da7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012af22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  0012afa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005094 	.word	0x08005094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005094 	.word	0x08005094

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef>:
		mid_value_ms,
		max_value_ms,
		measurement_error);

void IcHandlerTim3(TIM_HandleTypeDef *htim)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	switch ((uint8_t)htim->Channel)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7f1b      	ldrb	r3, [r3, #28]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d000      	beq.n	8000582 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x12>
	{
		case HAL_TIM_ACTIVE_CHANNEL_1:
			aileron_servo_command.calculatePulseWidth();
			break;
	}
}
 8000580:	e003      	b.n	800058a <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x1a>
			aileron_servo_command.calculatePulseWidth();
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_Z13IcHandlerTim3P19__TIM_HandleTypeDef+0x24>)
 8000584:	f003 ffb8 	bl	80044f8 <_ZN11PWMCapturer19calculatePulseWidthEv>
			break;
 8000588:	bf00      	nop
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000178 	.word	0x20000178

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b0a8      	sub	sp, #160	; 0xa0
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fe77 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 fab9 	bl	8000b18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fc35 	bl	8000e14 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80005aa:	f000 fc05 	bl	8000db8 <_ZL19MX_USART1_UART_Initv>
  MX_TIM3_Init();
 80005ae:	f000 fb27 	bl	8000c00 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_RegisterCallback(&htim3, HAL_TIM_IC_CAPTURE_CB_ID, IcHandlerTim3);
 80005b2:	4aa5      	ldr	r2, [pc, #660]	; (8000848 <main+0x2b0>)
 80005b4:	2112      	movs	r1, #18
 80005b6:	48a5      	ldr	r0, [pc, #660]	; (800084c <main+0x2b4>)
 80005b8:	f002 fb58 	bl	8002c6c <HAL_TIM_RegisterCallback>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005bc:	2100      	movs	r1, #0
 80005be:	48a3      	ldr	r0, [pc, #652]	; (800084c <main+0x2b4>)
 80005c0:	f001 ff02 	bl	80023c8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80005c4:	2104      	movs	r1, #4
 80005c6:	48a1      	ldr	r0, [pc, #644]	; (800084c <main+0x2b4>)
 80005c8:	f001 fe7e 	bl	80022c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005cc:	2108      	movs	r1, #8
 80005ce:	489f      	ldr	r0, [pc, #636]	; (800084c <main+0x2b4>)
 80005d0:	f001 fe7a 	bl	80022c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80005d4:	210c      	movs	r1, #12
 80005d6:	489d      	ldr	r0, [pc, #628]	; (800084c <main+0x2b4>)
 80005d8:	f001 fe76 	bl	80022c8 <HAL_TIM_PWM_Start>

  Servo switch_PWM_gen(htim3.Instance, 3), aileron_PWM_gen(htim3.Instance, 4), arm_PWM_gen(htim3.Instance, 2);
 80005dc:	4b9b      	ldr	r3, [pc, #620]	; (800084c <main+0x2b4>)
 80005de:	6819      	ldr	r1, [r3, #0]
 80005e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005e4:	2203      	movs	r2, #3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 f8c8 	bl	800477c <_ZN5ServoC1EP11TIM_TypeDefh>
 80005ec:	4b97      	ldr	r3, [pc, #604]	; (800084c <main+0x2b4>)
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005f4:	2204      	movs	r2, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 f8c0 	bl	800477c <_ZN5ServoC1EP11TIM_TypeDefh>
 80005fc:	4b93      	ldr	r3, [pc, #588]	; (800084c <main+0x2b4>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000604:	2202      	movs	r2, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f8b8 	bl	800477c <_ZN5ServoC1EP11TIM_TypeDefh>
  char str[100] = "\0";
 800060c:	4b90      	ldr	r3, [pc, #576]	; (8000850 <main+0x2b8>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	823b      	strh	r3, [r7, #16]
 8000612:	f107 0312 	add.w	r3, r7, #18
 8000616:	2262      	movs	r2, #98	; 0x62
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f935 	bl	800488a <memset>
  char start_str[10] = "\0";
 8000620:	4b8b      	ldr	r3, [pc, #556]	; (8000850 <main+0x2b8>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	80bb      	strh	r3, [r7, #4]
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
  uint32_t eps = 4; //delta between PWM measurements
 800062e:	2304      	movs	r3, #4
 8000630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint8_t check1_flag = 0,
 8000634:	2300      	movs	r3, #0
 8000636:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  check2_flag = 0,
 800063a:	2300      	movs	r3, #0
 800063c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		  counter = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive (&huart1, (uint8_t*) start_str, sizeof(start_str), 1000);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	220a      	movs	r2, #10
 800064e:	4881      	ldr	r0, [pc, #516]	; (8000854 <main+0x2bc>)
 8000650:	f003 fa68 	bl	8003b24 <HAL_UART_Receive>

	  arm_PWM_gen.setPositionMicroSeconds(989);//set disARM mode
 8000654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000658:	f240 31dd 	movw	r1, #989	; 0x3dd
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f8a3 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
	  switch_PWM_gen.setPositionMicroSeconds(989);
 8000662:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000666:	f240 31dd 	movw	r1, #989	; 0x3dd
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f89c 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
	  aileron_PWM_gen.setPositionMicroSeconds(1500);
 8000670:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000674:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f895 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>

	  if (counter < 1 && start_str[0] == '1')
 800067e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8217 	bne.w	8000ab6 <main+0x51e>
 8000688:	793b      	ldrb	r3, [r7, #4]
 800068a:	2b31      	cmp	r3, #49	; 0x31
 800068c:	f040 8213 	bne.w	8000ab6 <main+0x51e>
	  {
		  counter++;
 8000690:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000694:	3301      	adds	r3, #1
 8000696:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

		  //---------------------------------------------------------------------
		  //-------------test1 - direct mode aileron command check---------------
		  //---------------------------------------------------------------------
		  check1_flag = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  check2_flag = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

		  sprintf(str, "Test 1 - Direct mode aileron command check is in progress...\n");
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4a6b      	ldr	r2, [pc, #428]	; (8000858 <main+0x2c0>)
 80006ac:	461c      	mov	r4, r3
 80006ae:	4615      	mov	r5, r2
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006c0:	c407      	stmia	r4!, {r0, r1, r2}
 80006c2:	8023      	strh	r3, [r4, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 80006c4:	f107 0110 	add.w	r1, r7, #16
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	2264      	movs	r2, #100	; 0x64
 80006ce:	4861      	ldr	r0, [pc, #388]	; (8000854 <main+0x2bc>)
 80006d0:	f003 f98f 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2264      	movs	r2, #100	; 0x64
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 f8d4 	bl	800488a <memset>

		  switch_PWM_gen.setPositionMicroSeconds(989); // set the direct mode
 80006e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006e6:	f240 31dd 	movw	r1, #989	; 0x3dd
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f85c 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 80006f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f4:	f000 fe3e 	bl	8001374 <HAL_Delay>

		  aileron_PWM_gen.setPositionMicroSeconds(989); // set the stick fully left
 80006f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006fc:	f240 31dd 	movw	r1, #989	; 0x3dd
 8000700:	4618      	mov	r0, r3
 8000702:	f004 f851 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 8000706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070a:	f000 fe33 	bl	8001374 <HAL_Delay>


		  if(abs((int)(aileron_servo_command.getPulseWidthDif() - 989)) < eps) // check the command is equal to the stick
 800070e:	4853      	ldr	r0, [pc, #332]	; (800085c <main+0x2c4>)
 8000710:	f003 ffff 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 8000714:	4603      	mov	r3, r0
 8000716:	f2a3 33dd 	subw	r3, r3, #989	; 0x3dd
 800071a:	2b00      	cmp	r3, #0
 800071c:	bfb8      	it	lt
 800071e:	425b      	neglt	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000726:	4293      	cmp	r3, r2
 8000728:	bf8c      	ite	hi
 800072a:	2301      	movhi	r3, #1
 800072c:	2300      	movls	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <main+0x1a4>
			  check1_flag = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800073a:	e002      	b.n	8000742 <main+0x1aa>
		  else
			  check1_flag = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		  sprintf(str, "Command from the stick = %d, command to the servo = %d\n", (int)989, (int)aileron_servo_command.getPulseWidthDif());
 8000742:	4846      	ldr	r0, [pc, #280]	; (800085c <main+0x2c4>)
 8000744:	f003 ffe5 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 8000748:	4603      	mov	r3, r0
 800074a:	f107 0010 	add.w	r0, r7, #16
 800074e:	f240 32dd 	movw	r2, #989	; 0x3dd
 8000752:	4943      	ldr	r1, [pc, #268]	; (8000860 <main+0x2c8>)
 8000754:	f004 f95a 	bl	8004a0c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000758:	f107 0110 	add.w	r1, r7, #16
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	2264      	movs	r2, #100	; 0x64
 8000762:	483c      	ldr	r0, [pc, #240]	; (8000854 <main+0x2bc>)
 8000764:	f003 f945 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2264      	movs	r2, #100	; 0x64
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f004 f88a 	bl	800488a <memset>
		  HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 fdfb 	bl	8001374 <HAL_Delay>

		  aileron_PWM_gen.setPositionMicroSeconds(2013); // set the stick fully right
 800077e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000782:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f80e 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 fdf0 	bl	8001374 <HAL_Delay>

		  if(abs((int)(aileron_servo_command.getPulseWidthDif() - 2013)) < eps) // check the command is equal to the stick
 8000794:	4831      	ldr	r0, [pc, #196]	; (800085c <main+0x2c4>)
 8000796:	f003 ffbc 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 800079a:	4603      	mov	r3, r0
 800079c:	f2a3 73dd 	subw	r3, r3, #2013	; 0x7dd
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bfb8      	it	lt
 80007a4:	425b      	neglt	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80007ac:	4293      	cmp	r3, r2
 80007ae:	bf8c      	ite	hi
 80007b0:	2301      	movhi	r3, #1
 80007b2:	2300      	movls	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <main+0x22a>
			  check2_flag = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80007c0:	e002      	b.n	80007c8 <main+0x230>
		  else
			  check2_flag = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

		  sprintf(str, "Command from the stick = %d, command to the servo = %d\n", (int)2013, (int)aileron_servo_command.getPulseWidthDif());
 80007c8:	4824      	ldr	r0, [pc, #144]	; (800085c <main+0x2c4>)
 80007ca:	f003 ffa2 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f107 0010 	add.w	r0, r7, #16
 80007d4:	f240 72dd 	movw	r2, #2013	; 0x7dd
 80007d8:	4921      	ldr	r1, [pc, #132]	; (8000860 <main+0x2c8>)
 80007da:	f004 f917 	bl	8004a0c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 80007de:	f107 0110 	add.w	r1, r7, #16
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	2264      	movs	r2, #100	; 0x64
 80007e8:	481a      	ldr	r0, [pc, #104]	; (8000854 <main+0x2bc>)
 80007ea:	f003 f902 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2264      	movs	r2, #100	; 0x64
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f847 	bl	800488a <memset>

		  if (check1_flag*check2_flag == 1)
 80007fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000800:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	d12d      	bne.n	8000868 <main+0x2d0>
		  {
			  sprintf(str, "Test 1 has passed\n");
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <main+0x2cc>)
 8000812:	461c      	mov	r4, r3
 8000814:	4615      	mov	r5, r2
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	8022      	strh	r2, [r4, #0]
 8000820:	3402      	adds	r4, #2
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000826:	f107 0110 	add.w	r1, r7, #16
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	2264      	movs	r2, #100	; 0x64
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <main+0x2bc>)
 8000832:	f003 f8de 	bl	80039f2 <HAL_UART_Transmit>
			  memset(str, '\0', sizeof(str));
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2264      	movs	r2, #100	; 0x64
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 f823 	bl	800488a <memset>
 8000844:	e02c      	b.n	80008a0 <main+0x308>
 8000846:	bf00      	nop
 8000848:	08000571 	.word	0x08000571
 800084c:	2000008c 	.word	0x2000008c
 8000850:	0800521c 	.word	0x0800521c
 8000854:	20000138 	.word	0x20000138
 8000858:	080050ac 	.word	0x080050ac
 800085c:	20000178 	.word	0x20000178
 8000860:	080050ec 	.word	0x080050ec
 8000864:	08005124 	.word	0x08005124
		  }
		  else
		  {
			  sprintf(str, "Test 1 has failed\n");
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4aa2      	ldr	r2, [pc, #648]	; (8000af8 <main+0x560>)
 800086e:	461c      	mov	r4, r3
 8000870:	4615      	mov	r5, r2
 8000872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000876:	682b      	ldr	r3, [r5, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	8022      	strh	r2, [r4, #0]
 800087c:	3402      	adds	r4, #2
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000882:	f107 0110 	add.w	r1, r7, #16
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	2264      	movs	r2, #100	; 0x64
 800088c:	489b      	ldr	r0, [pc, #620]	; (8000afc <main+0x564>)
 800088e:	f003 f8b0 	bl	80039f2 <HAL_UART_Transmit>
			  memset(str, '\0', sizeof(str));
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fff5 	bl	800488a <memset>
		  }

		  //---------------------------Reset-------------------------------------

		  aileron_PWM_gen.setPositionMicroSeconds(1500);
 80008a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008a4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 ff7d 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(3000);
 80008ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008b2:	f000 fd5f 	bl	8001374 <HAL_Delay>


		  //---------------------------------------------------------------------
		  //------test2 - stab mode integral calc and limitation check ----------
		  //---------------------------------------------------------------------
		  check1_flag = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  check2_flag = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

		  sprintf(str, "Test 2 - Stab mode integral calc and limitation check is in progress...\n");
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4a8e      	ldr	r2, [pc, #568]	; (8000b00 <main+0x568>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	4611      	mov	r1, r2
 80008cc:	2349      	movs	r3, #73	; 0x49
 80008ce:	461a      	mov	r2, r3
 80008d0:	f003 ffd0 	bl	8004874 <memcpy>
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 80008d4:	f107 0110 	add.w	r1, r7, #16
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	4887      	ldr	r0, [pc, #540]	; (8000afc <main+0x564>)
 80008e0:	f003 f887 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2264      	movs	r2, #100	; 0x64
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 ffcc 	bl	800488a <memset>

		  arm_PWM_gen.setPositionMicroSeconds(2013);//set ARM mode
 80008f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008f6:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 ff54 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 8000900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000904:	f000 fd36 	bl	8001374 <HAL_Delay>
		  switch_PWM_gen.setPositionMicroSeconds(1500); // set the stab mode
 8000908:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800090c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000910:	4618      	mov	r0, r3
 8000912:	f003 ff49 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(1000);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f000 fd2b 	bl	8001374 <HAL_Delay>

		  aileron_PWM_gen.setPositionMicroSeconds(989); // set the stick fully left
 800091e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000922:	f240 31dd 	movw	r1, #989	; 0x3dd
 8000926:	4618      	mov	r0, r3
 8000928:	f003 ff3e 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(995); // 1 second
 800092c:	f240 30e3 	movw	r0, #995	; 0x3e3
 8000930:	f000 fd20 	bl	8001374 <HAL_Delay>

		  //omega_zad_x = (0.234375*rc_input[AIL2] - 351.5625) = -120 deg/s;
		  //output[AIL1] = (int)(1500+0.4*omega_x_PI_reg.getOutput()) = 996;

		  if(abs((int)(aileron_servo_command.getPulseWidthDif() - 1115)) < 10*eps) // check the command is equal to the stick
 8000934:	4873      	ldr	r0, [pc, #460]	; (8000b04 <main+0x56c>)
 8000936:	f003 feec 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 800093a:	4603      	mov	r3, r0
 800093c:	f2a3 435b 	subw	r3, r3, #1115	; 0x45b
 8000940:	2b00      	cmp	r3, #0
 8000942:	bfb8      	it	lt
 8000944:	425b      	neglt	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4299      	cmp	r1, r3
 8000956:	bf34      	ite	cc
 8000958:	2301      	movcc	r3, #1
 800095a:	2300      	movcs	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <main+0x3d2>
			  check1_flag = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8000968:	e002      	b.n	8000970 <main+0x3d8>
		  else
			  check1_flag = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


		  sprintf(str, "Omega X command from the stick = %d deg/s, command to the servo = %d\n", (int)(-120),aileron_servo_command.getPulseWidthDif());
 8000970:	4864      	ldr	r0, [pc, #400]	; (8000b04 <main+0x56c>)
 8000972:	f003 fece 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 8000976:	4603      	mov	r3, r0
 8000978:	f107 0010 	add.w	r0, r7, #16
 800097c:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8000980:	4961      	ldr	r1, [pc, #388]	; (8000b08 <main+0x570>)
 8000982:	f004 f843 	bl	8004a0c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000986:	f107 0110 	add.w	r1, r7, #16
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	2264      	movs	r2, #100	; 0x64
 8000990:	485a      	ldr	r0, [pc, #360]	; (8000afc <main+0x564>)
 8000992:	f003 f82e 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2264      	movs	r2, #100	; 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 ff73 	bl	800488a <memset>

		  HAL_Delay(3000); // 3 more seconds
 80009a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a8:	f000 fce4 	bl	8001374 <HAL_Delay>

		  if(abs((int)(aileron_servo_command.getPulseWidthDif() - 836)) < 10*eps) // check the integral is limited
 80009ac:	4855      	ldr	r0, [pc, #340]	; (8000b04 <main+0x56c>)
 80009ae:	f003 feb0 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bfb8      	it	lt
 80009bc:	425b      	neglt	r3, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4299      	cmp	r1, r3
 80009ce:	bf34      	ite	cc
 80009d0:	2301      	movcc	r3, #1
 80009d2:	2300      	movcs	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <main+0x44a>
			  check2_flag = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80009e0:	e002      	b.n	80009e8 <main+0x450>
		  else
			  check2_flag = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

		  sprintf(str, "Omega X command from the stick = %d deg/s, command to the servo = %d\n", (int)(-120),aileron_servo_command.getPulseWidthDif());
 80009e8:	4846      	ldr	r0, [pc, #280]	; (8000b04 <main+0x56c>)
 80009ea:	f003 fe92 	bl	8004712 <_ZN11PWMCapturer16getPulseWidthDifEv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f107 0010 	add.w	r0, r7, #16
 80009f4:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80009f8:	4943      	ldr	r1, [pc, #268]	; (8000b08 <main+0x570>)
 80009fa:	f004 f807 	bl	8004a0c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 80009fe:	f107 0110 	add.w	r1, r7, #16
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <main+0x564>)
 8000a0a:	f002 fff2 	bl	80039f2 <HAL_UART_Transmit>
		  memset(str, '\0', sizeof(str));
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2264      	movs	r2, #100	; 0x64
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 ff37 	bl	800488a <memset>


		  if (check1_flag*check2_flag == 1)
 8000a1c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000a20:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d11c      	bne.n	8000a66 <main+0x4ce>
		  {
			  sprintf(str, "Test 2 has passed\n");
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <main+0x574>)
 8000a32:	461c      	mov	r4, r3
 8000a34:	4615      	mov	r5, r2
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	8022      	strh	r2, [r4, #0]
 8000a40:	3402      	adds	r4, #2
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000a46:	f107 0110 	add.w	r1, r7, #16
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	2264      	movs	r2, #100	; 0x64
 8000a50:	482a      	ldr	r0, [pc, #168]	; (8000afc <main+0x564>)
 8000a52:	f002 ffce 	bl	80039f2 <HAL_UART_Transmit>
			  memset(str, '\0', sizeof(str));
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	2264      	movs	r2, #100	; 0x64
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 ff13 	bl	800488a <memset>
 8000a64:	e01b      	b.n	8000a9e <main+0x506>
		  }
		  else
		  {
			  sprintf(str, "Test 2 has failed\n");
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <main+0x578>)
 8000a6c:	461c      	mov	r4, r3
 8000a6e:	4615      	mov	r5, r2
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	8022      	strh	r2, [r4, #0]
 8000a7a:	3402      	adds	r4, #2
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str), 1000);
 8000a80:	f107 0110 	add.w	r1, r7, #16
 8000a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <main+0x564>)
 8000a8c:	f002 ffb1 	bl	80039f2 <HAL_UART_Transmit>
			  memset(str, '\0', sizeof(str));
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2264      	movs	r2, #100	; 0x64
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fef6 	bl	800488a <memset>
		  }

		  //---------------------------Reset-------------------------------------

		  aileron_PWM_gen.setPositionMicroSeconds(1500);
 8000a9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aa2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f003 fe7e 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
		  HAL_Delay(3000);
 8000aac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ab0:	f000 fc60 	bl	8001374 <HAL_Delay>
 8000ab4:	e01e      	b.n	8000af4 <main+0x55c>


	  }
	  else
	  {
		  if(counter == 1)
 8000ab6:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	f47f adc3 	bne.w	8000646 <main+0xae>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Tests finished!\n", 100, 1000);
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	2264      	movs	r2, #100	; 0x64
 8000ac6:	4913      	ldr	r1, [pc, #76]	; (8000b14 <main+0x57c>)
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <main+0x564>)
 8000aca:	f002 ff92 	bl	80039f2 <HAL_UART_Transmit>
			  counter++;
 8000ace:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
			  switch_PWM_gen.setPositionMicroSeconds(989);
 8000ad8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000adc:	f240 31dd 	movw	r1, #989	; 0x3dd
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fe61 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
			  aileron_PWM_gen.setPositionMicroSeconds(1500);
 8000ae6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aea:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fe5a 	bl	80047a8 <_ZN5Servo23setPositionMicroSecondsEm>
	  HAL_UART_Receive (&huart1, (uint8_t*) start_str, sizeof(start_str), 1000);
 8000af4:	e5a7      	b.n	8000646 <main+0xae>
 8000af6:	bf00      	nop
 8000af8:	08005138 	.word	0x08005138
 8000afc:	20000138 	.word	0x20000138
 8000b00:	0800514c 	.word	0x0800514c
 8000b04:	20000178 	.word	0x20000178
 8000b08:	08005198 	.word	0x08005198
 8000b0c:	080051e0 	.word	0x080051e0
 8000b10:	080051f4 	.word	0x080051f4
 8000b14:	08005208 	.word	0x08005208

08000b18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2230      	movs	r2, #48	; 0x30
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 feaf 	bl	800488a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <_Z18SystemClock_Configv+0xe0>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <_Z18SystemClock_Configv+0xe0>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <_Z18SystemClock_Configv+0xe0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <_Z18SystemClock_Configv+0xe4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a26      	ldr	r2, [pc, #152]	; (8000bfc <_Z18SystemClock_Configv+0xe4>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <_Z18SystemClock_Configv+0xe4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b8c:	23a0      	movs	r3, #160	; 0xa0
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0320 	add.w	r3, r7, #32
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 feb7 	bl	8001910 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000bb2:	f000 f965 	bl	8000e80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2105      	movs	r1, #5
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f90b 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000bea:	f000 f949 	bl	8000e80 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b092      	sub	sp, #72	; 0x48
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
 8000c3a:	615a      	str	r2, [r3, #20]
 8000c3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c40:	4a5c      	ldr	r2, [pc, #368]	; (8000db4 <_ZL12MX_TIM3_Initv+0x1b4>)
 8000c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c46:	224f      	movs	r2, #79	; 0x4f
 8000c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 22000;
 8000c50:	4b57      	ldr	r3, [pc, #348]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c52:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b54      	ldr	r3, [pc, #336]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c64:	4852      	ldr	r0, [pc, #328]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c66:	f001 fab5 	bl	80021d4 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_ZL12MX_TIM3_Initv+0x7e>
  {
    Error_Handler();
 8000c7a:	f000 f901 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4849      	ldr	r0, [pc, #292]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000c8c:	f001 fe8e 	bl	80029ac <HAL_TIM_ConfigClockSource>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <_ZL12MX_TIM3_Initv+0xa4>
  {
    Error_Handler();
 8000ca0:	f000 f8ee 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000ca4:	4842      	ldr	r0, [pc, #264]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000ca6:	f001 fb4d 	bl	8002344 <HAL_TIM_IC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf14      	ite	ne
 8000cb0:	2301      	movne	r3, #1
 8000cb2:	2300      	moveq	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <_ZL12MX_TIM3_Initv+0xbe>
  {
    Error_Handler();
 8000cba:	f000 f8e1 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cbe:	483c      	ldr	r0, [pc, #240]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000cc0:	f001 fac0 	bl	8002244 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000cd4:	f000 f8d4 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000ce8:	f002 fd9c 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <_ZL12MX_TIM3_Initv+0x100>
  {
    Error_Handler();
 8000cfc:	f000 f8c0 	bl	8000e80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4825      	ldr	r0, [pc, #148]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000d1a:	f001 fce4 	bl	80026e6 <HAL_TIM_IC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bf14      	ite	ne
 8000d24:	2301      	movne	r3, #1
 8000d26:	2300      	moveq	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <_ZL12MX_TIM3_Initv+0x132>
  {
    Error_Handler();
 8000d2e:	f000 f8a7 	bl	8000e80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	; 0x60
 8000d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2204      	movs	r2, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4819      	ldr	r0, [pc, #100]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000d4a:	f001 fd69 	bl	8002820 <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <_ZL12MX_TIM3_Initv+0x162>
  {
    Error_Handler();
 8000d5e:	f000 f88f 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2208      	movs	r2, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000d6a:	f001 fd59 	bl	8002820 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	bf14      	ite	ne
 8000d74:	2301      	movne	r3, #1
 8000d76:	2300      	moveq	r3, #0
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <_ZL12MX_TIM3_Initv+0x182>
  {
    Error_Handler();
 8000d7e:	f000 f87f 	bl	8000e80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	220c      	movs	r2, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000d8a:	f001 fd49 	bl	8002820 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf14      	ite	ne
 8000d94:	2301      	movne	r3, #1
 8000d96:	2300      	moveq	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <_ZL12MX_TIM3_Initv+0x1a2>
  {
    Error_Handler();
 8000d9e:	f000 f86f 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <_ZL12MX_TIM3_Initv+0x1b0>)
 8000da4:	f000 f928 	bl	8000ff8 <HAL_TIM_MspPostInit>

}
 8000da8:	bf00      	nop
 8000daa:	3748      	adds	r7, #72	; 0x48
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000008c 	.word	0x2000008c
 8000db4:	40000400 	.word	0x40000400

08000db8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000df0:	f002 fdb2 	bl	8003958 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf14      	ite	ne
 8000dfa:	2301      	movne	r3, #1
 8000dfc:	2300      	moveq	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000e04:	f000 f83c 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000138 	.word	0x20000138
 8000e10:	40011000 	.word	0x40011000

08000e14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <_ZL12MX_GPIO_Initv+0x68>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <Error_Handler+0x6>

08000e88 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d113      	bne.n	8000ec0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10e      	bne.n	8000ec0 <_Z41__static_initialization_and_destruction_0ii+0x38>
PWMCapturer aileron_servo_command = PWMCapturer(
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	f240 73dd 	movw	r3, #2013	; 0x7dd
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	f240 33dd 	movw	r3, #989	; 0x3dd
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4909      	ldr	r1, [pc, #36]	; (8000ee0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000ebc:	f003 fa9e 	bl	80043fc <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d107      	bne.n	8000ed6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d102      	bne.n	8000ed6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000ed2:	f003 faf1 	bl	80044b8 <_ZN11PWMCapturerD1Ev>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	20000178 	.word	0x20000178

08000ee8 <_GLOBAL__sub_I_htim3>:
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff ffc9 	bl	8000e88 <_Z41__static_initialization_and_destruction_0ii>
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_GLOBAL__sub_D_htim3>:
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ffc1 	bl	8000e88 <_Z41__static_initialization_and_destruction_0ii>
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_TIM_Base_MspInit+0x94>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d133      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_TIM_Base_MspInit+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_TIM_Base_MspInit+0x9c>)
 8000fce:	f000 fb05 	bl	80015dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	201d      	movs	r0, #29
 8000fd8:	f000 fac9 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fdc:	201d      	movs	r0, #29
 8000fde:	f000 fae2 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <HAL_TIM_MspPostInit+0xa4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d13b      	bne.n	8001092 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_TIM_MspPostInit+0xa8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001062:	2302      	movs	r3, #2
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <HAL_TIM_MspPostInit+0xac>)
 800106e:	f000 fab5 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001072:	2303      	movs	r3, #3
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001082:	2302      	movs	r3, #2
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <HAL_TIM_MspPostInit+0xb0>)
 800108e:	f000 faa5 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40000400 	.word	0x40000400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020400 	.word	0x40020400

080010ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_UART_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12c      	bne.n	8001128 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001106:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001118:	2307      	movs	r3, #7
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <HAL_UART_MspInit+0x8c>)
 8001124:	f000 fa5a 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40011000 	.word	0x40011000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f8d4 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM3_IRQHandler+0x10>)
 8001196:	f001 f97f 	bl	8002498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000008c 	.word	0x2000008c

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f003 fb1c 	bl	8004810 <__errno>
 80011d8:	4602      	mov	r2, r0
 80011da:	230c      	movs	r3, #12
 80011dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20020000 	.word	0x20020000
 8001204:	00000400 	.word	0x00000400
 8001208:	200001a0 	.word	0x200001a0
 800120c:	200001b8 	.word	0x200001b8

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SystemInit+0x28>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <SystemInit+0x28>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SystemInit+0x28>)
 8001226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122a:	609a      	str	r2, [r3, #8]
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
  ldr  r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800125a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffd3 	bl	8001210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f003 fad7 	bl	800481c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff f993 	bl	8000598 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001278:	080052f4 	.word	0x080052f4
  ldr  r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001280:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001284:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001288:	200001b4 	.word	0x200001b4

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 f94d 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fe20 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f965 	bl	80015c2 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f92d 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	200001ac 	.word	0x200001ac

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200001ac 	.word	0x200001ac

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_Delay+0x40>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	e16b      	b.n	80018d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	429a      	cmp	r2, r3
 8001612:	f040 815a 	bne.w	80018ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d00b      	beq.n	8001636 <HAL_GPIO_Init+0x5a>
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162a:	2b11      	cmp	r3, #17
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b12      	cmp	r3, #18
 8001634:	d130      	bne.n	8001698 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	2203      	movs	r2, #3
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0xfc>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d123      	bne.n	8001720 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	220f      	movs	r2, #15
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	691a      	ldr	r2, [r3, #16]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	08da      	lsrs	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3208      	adds	r2, #8
 800171a:	69b9      	ldr	r1, [r7, #24]
 800171c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0203 	and.w	r2, r3, #3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80b4 	beq.w	80018ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_GPIO_Init+0x308>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_GPIO_Init+0x308>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_GPIO_Init+0x308>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <HAL_GPIO_Init+0x30c>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_GPIO_Init+0x310>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x226>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a50      	ldr	r2, [pc, #320]	; (80018f0 <HAL_GPIO_Init+0x314>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <HAL_GPIO_Init+0x222>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4f      	ldr	r2, [pc, #316]	; (80018f4 <HAL_GPIO_Init+0x318>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01f      	beq.n	80017fa <HAL_GPIO_Init+0x21e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <HAL_GPIO_Init+0x31c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d019      	beq.n	80017f6 <HAL_GPIO_Init+0x21a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4d      	ldr	r2, [pc, #308]	; (80018fc <HAL_GPIO_Init+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x216>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4c      	ldr	r2, [pc, #304]	; (8001900 <HAL_GPIO_Init+0x324>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x212>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4b      	ldr	r2, [pc, #300]	; (8001904 <HAL_GPIO_Init+0x328>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_GPIO_Init+0x32c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x20a>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00e      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00a      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x228>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x228>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_GPIO_Init+0x30c>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_GPIO_Init+0x330>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <HAL_GPIO_Init+0x330>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_GPIO_Init+0x330>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001870:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_GPIO_Init+0x330>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_GPIO_Init+0x330>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_GPIO_Init+0x330>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_GPIO_Init+0x330>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_GPIO_Init+0x330>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f ae90 	bls.w	80015f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	; 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40021400 	.word	0x40021400
 8001904:	40021800 	.word	0x40021800
 8001908:	40021c00 	.word	0x40021c00
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e25b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d075      	beq.n	8001a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192e:	4ba3      	ldr	r3, [pc, #652]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d00c      	beq.n	8001954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4ba0      	ldr	r3, [pc, #640]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001942:	2b08      	cmp	r3, #8
 8001944:	d112      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b9d      	ldr	r3, [pc, #628]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b99      	ldr	r3, [pc, #612]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x108>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d157      	bne.n	8001a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e236      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x74>
 8001976:	4b91      	ldr	r3, [pc, #580]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a90      	ldr	r2, [pc, #576]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a8a      	ldr	r2, [pc, #552]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xb0>
 80019a8:	4b84      	ldr	r3, [pc, #528]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a83      	ldr	r2, [pc, #524]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a80      	ldr	r2, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fcc8 	bl	800135c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fcc4 	bl	800135c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1fb      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xc0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcb4 	bl	800135c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcb0 	bl	800135c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1e7      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0xe8>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a26:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1bb      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4952      	ldr	r1, [pc, #328]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fc69 	bl	800135c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fc65 	bl	800135c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e19c      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4940      	ldr	r1, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc48 	bl	800135c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fc44 	bl	800135c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e17b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d030      	beq.n	8001b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff fc28 	bl	800135c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc24 	bl	800135c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e15b      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x200>
 8001b2e:	e015      	b.n	8001b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x2b4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fc11 	bl	800135c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc0d 	bl	800135c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e144      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a0 	beq.w	8001caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d121      	bne.n	8001bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_RCC_OscConfig+0x2b8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fbd3 	bl	800135c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e011      	b.n	8001bde <HAL_RCC_OscConfig+0x2ce>
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	42470000 	.word	0x42470000
 8001bc4:	42470e80 	.word	0x42470e80
 8001bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff fbc6 	bl	800135c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0fd      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x4d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	4a7c      	ldr	r2, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfe:	e01c      	b.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b77      	ldr	r3, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a76      	ldr	r2, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a73      	ldr	r2, [pc, #460]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c26:	4a70      	ldr	r2, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c2e:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb8b 	bl	800135c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fb87 	bl	800135c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0bc      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ee      	beq.n	8001c4a <HAL_RCC_OscConfig+0x33a>
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb75 	bl	800135c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fb71 	bl	800135c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0a6      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8092 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d05c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d141      	bne.n	8001d4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb45 	bl	800135c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fb41 	bl	800135c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e078      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69da      	ldr	r2, [r3, #28]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	019b      	lsls	r3, r3, #6
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
 8001d18:	4933      	ldr	r1, [pc, #204]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fb1a 	bl	800135c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fb16 	bl	800135c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04d      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x41c>
 8001d4a:	e045      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x4dc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb03 	bl	800135c <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff faff 	bl	800135c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e036      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x44a>
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e029      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x4d8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d115      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	42470060 	.word	0x42470060

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cc      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90c      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e44:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a58      	ldr	r2, [pc, #352]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	494d      	ldr	r1, [pc, #308]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e067      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff fa3c 	bl	800135c <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff fa38 	bl	800135c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20c      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e032      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4916      	ldr	r1, [pc, #88]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490e      	ldr	r1, [pc, #56]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f76:	f000 f821 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f99c 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08005280 	.word	0x08005280
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d007      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x32>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 80b4 	bne.w	8002150 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fea:	60bb      	str	r3, [r7, #8]
       break;
 8001fec:	e0b3      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ff0:	60bb      	str	r3, [r7, #8]
      break;
 8001ff2:	e0b0      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04a      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	f04f 0400 	mov.w	r4, #0
 8002014:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	ea03 0501 	and.w	r5, r3, r1
 8002020:	ea04 0602 	and.w	r6, r4, r2
 8002024:	4629      	mov	r1, r5
 8002026:	4632      	mov	r2, r6
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f04f 0400 	mov.w	r4, #0
 8002030:	0154      	lsls	r4, r2, #5
 8002032:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	4619      	mov	r1, r3
 800203a:	4622      	mov	r2, r4
 800203c:	1b49      	subs	r1, r1, r5
 800203e:	eb62 0206 	sbc.w	r2, r2, r6
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	0194      	lsls	r4, r2, #6
 800204c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002050:	018b      	lsls	r3, r1, #6
 8002052:	1a5b      	subs	r3, r3, r1
 8002054:	eb64 0402 	sbc.w	r4, r4, r2
 8002058:	f04f 0100 	mov.w	r1, #0
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	00e2      	lsls	r2, r4, #3
 8002062:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002066:	00d9      	lsls	r1, r3, #3
 8002068:	460b      	mov	r3, r1
 800206a:	4614      	mov	r4, r2
 800206c:	195b      	adds	r3, r3, r5
 800206e:	eb44 0406 	adc.w	r4, r4, r6
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	0262      	lsls	r2, r4, #9
 800207c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002080:	0259      	lsls	r1, r3, #9
 8002082:	460b      	mov	r3, r1
 8002084:	4614      	mov	r4, r2
 8002086:	4618      	mov	r0, r3
 8002088:	4621      	mov	r1, r4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	461a      	mov	r2, r3
 8002092:	4623      	mov	r3, r4
 8002094:	f7fe f8ec 	bl	8000270 <__aeabi_uldivmod>
 8002098:	4603      	mov	r3, r0
 800209a:	460c      	mov	r4, r1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e049      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	f04f 0400 	mov.w	r4, #0
 80020aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	ea03 0501 	and.w	r5, r3, r1
 80020b6:	ea04 0602 	and.w	r6, r4, r2
 80020ba:	4629      	mov	r1, r5
 80020bc:	4632      	mov	r2, r6
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	0154      	lsls	r4, r2, #5
 80020c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020cc:	014b      	lsls	r3, r1, #5
 80020ce:	4619      	mov	r1, r3
 80020d0:	4622      	mov	r2, r4
 80020d2:	1b49      	subs	r1, r1, r5
 80020d4:	eb62 0206 	sbc.w	r2, r2, r6
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	0194      	lsls	r4, r2, #6
 80020e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020e6:	018b      	lsls	r3, r1, #6
 80020e8:	1a5b      	subs	r3, r3, r1
 80020ea:	eb64 0402 	sbc.w	r4, r4, r2
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020fc:	00d9      	lsls	r1, r3, #3
 80020fe:	460b      	mov	r3, r1
 8002100:	4614      	mov	r4, r2
 8002102:	195b      	adds	r3, r3, r5
 8002104:	eb44 0406 	adc.w	r4, r4, r6
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	02a2      	lsls	r2, r4, #10
 8002112:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002116:	0299      	lsls	r1, r3, #10
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	4618      	mov	r0, r3
 800211e:	4621      	mov	r1, r4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f04f 0400 	mov.w	r4, #0
 8002126:	461a      	mov	r2, r3
 8002128:	4623      	mov	r3, r4
 800212a:	f7fe f8a1 	bl	8000270 <__aeabi_uldivmod>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
 8002132:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	0c1b      	lsrs	r3, r3, #16
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	3301      	adds	r3, #1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	60bb      	str	r3, [r7, #8]
      break;
 800214e:	e002      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002152:	60bb      	str	r3, [r7, #8]
      break;
 8002154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002156:	68bb      	ldr	r3, [r7, #8]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08005290 	.word	0x08005290

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffdc 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b4:	4601      	mov	r1, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08005290 	.word	0x08005290

080021d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e028      	b.n	8002238 <HAL_TIM_Base_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d111      	bne.n	8002216 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f001 fabc 	bl	8003778 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_TIM_Base_Init+0x6c>)
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f000 fe6b 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	08000f59 	.word	0x08000f59

08002244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e028      	b.n	80022a8 <HAL_TIM_PWM_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d111      	bne.n	8002286 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f001 fa84 	bl	8003778 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <HAL_TIM_PWM_Init+0x6c>)
 800227c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f000 fe33 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	080022b5 	.word	0x080022b5

080022b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 fa26 	bl	800372c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_TIM_PWM_Start+0x74>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_TIM_PWM_Start+0x2c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_TIM_PWM_Start+0x78>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x30>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_TIM_PWM_Start+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d007      	beq.n	8002330 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40010400 	.word	0x40010400

08002344 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e028      	b.n	80023a8 <HAL_TIM_IC_Init+0x64>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d111      	bne.n	8002386 <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f001 fa04 	bl	8003778 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_TIM_IC_Init+0x6c>)
 800237c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f000 fdb3 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	080023b5 	.word	0x080023b5

080023b4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d841      	bhi.n	800245c <HAL_TIM_IC_Start_IT+0x94>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <HAL_TIM_IC_Start_IT+0x18>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	08002415 	.word	0x08002415
 80023e4:	0800245d 	.word	0x0800245d
 80023e8:	0800245d 	.word	0x0800245d
 80023ec:	0800245d 	.word	0x0800245d
 80023f0:	08002427 	.word	0x08002427
 80023f4:	0800245d 	.word	0x0800245d
 80023f8:	0800245d 	.word	0x0800245d
 80023fc:	0800245d 	.word	0x0800245d
 8002400:	08002439 	.word	0x08002439
 8002404:	0800245d 	.word	0x0800245d
 8002408:	0800245d 	.word	0x0800245d
 800240c:	0800245d 	.word	0x0800245d
 8002410:	0800244b 	.word	0x0800244b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0202 	orr.w	r2, r2, #2
 8002422:	60da      	str	r2, [r3, #12]
      break;
 8002424:	e01b      	b.n	800245e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0204 	orr.w	r2, r2, #4
 8002434:	60da      	str	r2, [r3, #12]
      break;
 8002436:	e012      	b.n	800245e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	60da      	str	r2, [r3, #12]
      break;
 8002448:	e009      	b.n	800245e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0210 	orr.w	r2, r2, #16
 8002458:	60da      	str	r2, [r3, #12]
      break;
 800245a:	e000      	b.n	800245e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800245c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f001 f960 	bl	800372c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d007      	beq.n	800248e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d128      	bne.n	8002500 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d121      	bne.n	8002500 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0202 	mvn.w	r2, #2
 80024c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	e009      	b.n	80024fa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d128      	bne.n	8002560 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d121      	bne.n	8002560 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0204 	mvn.w	r2, #4
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
 8002544:	e009      	b.n	800255a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d128      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d121      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e009      	b.n	80025ba <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d128      	bne.n	8002620 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d121      	bne.n	8002620 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e009      	b.n	800261a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10f      	bne.n	800264e <HAL_TIM_IRQHandler+0x1b6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d110      	bne.n	800267e <HAL_TIM_IRQHandler+0x1e6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d109      	bne.n	800267e <HAL_TIM_IRQHandler+0x1e6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d110      	bne.n	80026ae <HAL_TIM_IRQHandler+0x216>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d109      	bne.n	80026ae <HAL_TIM_IRQHandler+0x216>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d110      	bne.n	80026de <HAL_TIM_IRQHandler+0x246>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d109      	bne.n	80026de <HAL_TIM_IRQHandler+0x246>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0220 	mvn.w	r2, #32
 80026d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIM_IC_ConfigChannel+0x1a>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e08a      	b.n	8002816 <HAL_TIM_IC_ConfigChannel+0x130>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11b      	bne.n	800274e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f000 fe3d 	bl	80033a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 020c 	bic.w	r2, r2, #12
 8002738:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6999      	ldr	r1, [r3, #24]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	619a      	str	r2, [r3, #24]
 800274c:	e05a      	b.n	8002804 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11c      	bne.n	800278e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f000 fec1 	bl	80034ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002776:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6999      	ldr	r1, [r3, #24]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	619a      	str	r2, [r3, #24]
 800278c:	e03a      	b.n	8002804 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f000 ff0e 	bl	80035c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 020c 	bic.w	r2, r2, #12
 80027b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69d9      	ldr	r1, [r3, #28]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	61da      	str	r2, [r3, #28]
 80027ca:	e01b      	b.n	8002804 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f000 ff2e 	bl	800363c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69d9      	ldr	r1, [r3, #28]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002836:	2302      	movs	r3, #2
 8002838:	e0b4      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	f200 809f 	bhi.w	8002990 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	0800288d 	.word	0x0800288d
 800285c:	08002991 	.word	0x08002991
 8002860:	08002991 	.word	0x08002991
 8002864:	08002991 	.word	0x08002991
 8002868:	080028cd 	.word	0x080028cd
 800286c:	08002991 	.word	0x08002991
 8002870:	08002991 	.word	0x08002991
 8002874:	08002991 	.word	0x08002991
 8002878:	0800290f 	.word	0x0800290f
 800287c:	08002991 	.word	0x08002991
 8002880:	08002991 	.word	0x08002991
 8002884:	08002991 	.word	0x08002991
 8002888:	0800294f 	.word	0x0800294f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fbd6 	bl	8003044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0208 	orr.w	r2, r2, #8
 80028a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6999      	ldr	r1, [r3, #24]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	619a      	str	r2, [r3, #24]
      break;
 80028ca:	e062      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fc26 	bl	8003124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6999      	ldr	r1, [r3, #24]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	021a      	lsls	r2, r3, #8
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	619a      	str	r2, [r3, #24]
      break;
 800290c:	e041      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fc7b 	bl	8003210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0208 	orr.w	r2, r2, #8
 8002928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0204 	bic.w	r2, r2, #4
 8002938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69d9      	ldr	r1, [r3, #28]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	61da      	str	r2, [r3, #28]
      break;
 800294c:	e021      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fccf 	bl	80032f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69d9      	ldr	r1, [r3, #28]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	61da      	str	r2, [r3, #28]
      break;
 800298e:	e000      	b.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002990:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_ConfigClockSource+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e0a6      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x166>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d067      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0x120>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d80b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x6c>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d073      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0x140>
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d802      	bhi.n	8002a0e <HAL_TIM_ConfigClockSource+0x62>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06f      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a0c:	e078      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d06c      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0x140>
 8002a12:	2b30      	cmp	r3, #48	; 0x30
 8002a14:	d06a      	beq.n	8002aec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a16:	e073      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a18:	2b70      	cmp	r3, #112	; 0x70
 8002a1a:	d00d      	beq.n	8002a38 <HAL_TIM_ConfigClockSource+0x8c>
 8002a1c:	2b70      	cmp	r3, #112	; 0x70
 8002a1e:	d804      	bhi.n	8002a2a <HAL_TIM_ConfigClockSource+0x7e>
 8002a20:	2b50      	cmp	r3, #80	; 0x50
 8002a22:	d033      	beq.n	8002a8c <HAL_TIM_ConfigClockSource+0xe0>
 8002a24:	2b60      	cmp	r3, #96	; 0x60
 8002a26:	d041      	beq.n	8002aac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a28:	e06a      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2e:	d066      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x152>
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a34:	d017      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a36:	e063      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6899      	ldr	r1, [r3, #8]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f000 fe50 	bl	80036ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	609a      	str	r2, [r3, #8]
      break;
 8002a64:	e04c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6899      	ldr	r1, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f000 fe39 	bl	80036ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a88:	609a      	str	r2, [r3, #8]
      break;
 8002a8a:	e039      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f000 fcf7 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2150      	movs	r1, #80	; 0x50
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fe06 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8002aaa:	e029      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f000 fd53 	bl	8003564 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2160      	movs	r1, #96	; 0x60
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fdf6 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8002aca:	e019      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f000 fcd7 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fde6 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8002aea:	e009      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fddd 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e000      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d831      	bhi.n	8002b94 <HAL_TIM_ReadCapturedValue+0x78>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002b95 	.word	0x08002b95
 8002b40:	08002b95 	.word	0x08002b95
 8002b44:	08002b95 	.word	0x08002b95
 8002b48:	08002b77 	.word	0x08002b77
 8002b4c:	08002b95 	.word	0x08002b95
 8002b50:	08002b95 	.word	0x08002b95
 8002b54:	08002b95 	.word	0x08002b95
 8002b58:	08002b81 	.word	0x08002b81
 8002b5c:	08002b95 	.word	0x08002b95
 8002b60:	08002b95 	.word	0x08002b95
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002b8b 	.word	0x08002b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	60fb      	str	r3, [r7, #12]

      break;
 8002b74:	e00f      	b.n	8002b96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	60fb      	str	r3, [r7, #12]

      break;
 8002b7e:	e00a      	b.n	8002b96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	60fb      	str	r3, [r7, #12]

      break;
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	60fb      	str	r3, [r7, #12]

      break;
 8002b92:	e000      	b.n	8002b96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002b94:	bf00      	nop
  }

  return tmpreg;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	460b      	mov	r3, r1
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e136      	b.n	8002ef6 <HAL_TIM_RegisterCallback+0x28a>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_RegisterCallback+0x2a>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e12f      	b.n	8002ef6 <HAL_TIM_RegisterCallback+0x28a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	f040 80b9 	bne.w	8002e1e <HAL_TIM_RegisterCallback+0x1b2>
  {
    switch (CallbackID)
 8002cac:	7afb      	ldrb	r3, [r7, #11]
 8002cae:	2b1a      	cmp	r3, #26
 8002cb0:	f200 80b1 	bhi.w	8002e16 <HAL_TIM_RegisterCallback+0x1aa>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_TIM_RegisterCallback+0x50>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002d29 	.word	0x08002d29
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002d39 	.word	0x08002d39
 8002cc8:	08002d41 	.word	0x08002d41
 8002ccc:	08002d49 	.word	0x08002d49
 8002cd0:	08002d51 	.word	0x08002d51
 8002cd4:	08002d59 	.word	0x08002d59
 8002cd8:	08002d61 	.word	0x08002d61
 8002cdc:	08002d69 	.word	0x08002d69
 8002ce0:	08002d71 	.word	0x08002d71
 8002ce4:	08002d79 	.word	0x08002d79
 8002ce8:	08002d81 	.word	0x08002d81
 8002cec:	08002d89 	.word	0x08002d89
 8002cf0:	08002d91 	.word	0x08002d91
 8002cf4:	08002d99 	.word	0x08002d99
 8002cf8:	08002da1 	.word	0x08002da1
 8002cfc:	08002da9 	.word	0x08002da9
 8002d00:	08002db3 	.word	0x08002db3
 8002d04:	08002dbd 	.word	0x08002dbd
 8002d08:	08002dc7 	.word	0x08002dc7
 8002d0c:	08002dd1 	.word	0x08002dd1
 8002d10:	08002ddb 	.word	0x08002ddb
 8002d14:	08002de5 	.word	0x08002de5
 8002d18:	08002def 	.word	0x08002def
 8002d1c:	08002df9 	.word	0x08002df9
 8002d20:	08002e03 	.word	0x08002e03
 8002d24:	08002e0d 	.word	0x08002e0d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8002d2e:	e0dd      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002d36:	e0d9      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002d3e:	e0d5      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002d46:	e0d1      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002d4e:	e0cd      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002d56:	e0c9      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002d5e:	e0c5      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002d66:	e0c1      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002d6e:	e0bd      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8002d76:	e0b9      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8002d7e:	e0b5      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002d86:	e0b1      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002d8e:	e0ad      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002d96:	e0a9      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8002d9e:	e0a5      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8002da6:	e0a1      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8002db0:	e09c      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8002dba:	e097      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8002dc4:	e092      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8002dce:	e08d      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8002dd8:	e088      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8002de2:	e083      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8002dec:	e07e      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8002df6:	e079      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8002e00:	e074      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8002e0a:	e06f      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8002e14:	e06a      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e066      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d15e      	bne.n	8002ee8 <HAL_TIM_RegisterCallback+0x27c>
  {
    switch (CallbackID)
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	2b0d      	cmp	r3, #13
 8002e2e:	d857      	bhi.n	8002ee0 <HAL_TIM_RegisterCallback+0x274>
 8002e30:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <HAL_TIM_RegisterCallback+0x1cc>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e71 	.word	0x08002e71
 8002e3c:	08002e79 	.word	0x08002e79
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e89 	.word	0x08002e89
 8002e48:	08002e91 	.word	0x08002e91
 8002e4c:	08002e99 	.word	0x08002e99
 8002e50:	08002ea1 	.word	0x08002ea1
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002eb1 	.word	0x08002eb1
 8002e5c:	08002eb9 	.word	0x08002eb9
 8002e60:	08002ec1 	.word	0x08002ec1
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08002ed1 	.word	0x08002ed1
 8002e6c:	08002ed9 	.word	0x08002ed9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 8002e76:	e039      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8002e7e:	e035      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8002e86:	e031      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002e8e:	e02d      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8002e96:	e029      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002e9e:	e025      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8002ea6:	e021      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002eae:	e01d      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002eb6:	e019      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8002ebe:	e015      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8002ec6:	e011      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8002ece:	e00d      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8002ed6:	e009      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8002ede:	e005      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ee4:	bf00      	nop
 8002ee6:	e001      	b.n	8002eec <HAL_TIM_RegisterCallback+0x280>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3d      	ldr	r2, [pc, #244]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d027      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d023      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d017      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <TIM_Base_SetConfig+0x128>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <TIM_Base_SetConfig+0x130>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <TIM_Base_SetConfig+0x134>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <TIM_Base_SetConfig+0x138>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800
 8003038:	40001800 	.word	0x40001800
 800303c:	40001c00 	.word	0x40001c00
 8003040:	40002000 	.word	0x40002000

08003044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0201 	bic.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 0302 	bic.w	r3, r3, #2
 800308c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <TIM_OC1_SetConfig+0xd8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_OC1_SetConfig+0x64>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <TIM_OC1_SetConfig+0xdc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10c      	bne.n	80030c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0308 	bic.w	r3, r3, #8
 80030ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a15      	ldr	r2, [pc, #84]	; (800311c <TIM_OC1_SetConfig+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_OC1_SetConfig+0x8e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <TIM_OC1_SetConfig+0xdc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d111      	bne.n	80030f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	621a      	str	r2, [r3, #32]
}
 8003110:	bf00      	nop
 8003112:	371c      	adds	r7, #28
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	40010000 	.word	0x40010000
 8003120:	40010400 	.word	0x40010400

08003124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0320 	bic.w	r3, r3, #32
 800316e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <TIM_OC2_SetConfig+0xe4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC2_SetConfig+0x68>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a21      	ldr	r2, [pc, #132]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10d      	bne.n	80031a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a17      	ldr	r2, [pc, #92]	; (8003208 <TIM_OC2_SetConfig+0xe4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_OC2_SetConfig+0x94>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40010400 	.word	0x40010400

08003210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <TIM_OC3_SetConfig+0xe0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_OC3_SetConfig+0x66>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <TIM_OC3_SetConfig+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10d      	bne.n	8003292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <TIM_OC3_SetConfig+0xe0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_OC3_SetConfig+0x92>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <TIM_OC3_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	621a      	str	r2, [r3, #32]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010400 	.word	0x40010400

080032f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	031b      	lsls	r3, r3, #12
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <TIM_OC4_SetConfig+0xa4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_OC4_SetConfig+0x68>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <TIM_OC4_SetConfig+0xa8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d109      	bne.n	8003374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400

080033a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0201 	bic.w	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <TIM_TI1_SetConfig+0xcc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01b      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d017      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a25      	ldr	r2, [pc, #148]	; (8003474 <TIM_TI1_SetConfig+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <TIM_TI1_SetConfig+0xd4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00f      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <TIM_TI1_SetConfig+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00b      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <TIM_TI1_SetConfig+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <TIM_TI1_SetConfig+0xe0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_TI1_SetConfig+0x66>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <TIM_TI1_SetConfig+0xe4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <TIM_TI1_SetConfig+0x6a>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <TIM_TI1_SetConfig+0x6c>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e003      	b.n	800342e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	b2db      	uxtb	r3, r3
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f023 030a 	bic.w	r3, r3, #10
 8003448:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f003 030a 	and.w	r3, r3, #10
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40001800 	.word	0x40001800

0800348c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f023 0210 	bic.w	r2, r3, #16
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003516:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	b29b      	uxth	r3, r3
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800353c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	621a      	str	r2, [r3, #32]
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0210 	bic.w	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800358e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	031b      	lsls	r3, r3, #12
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003600:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	b2db      	uxtb	r3, r3
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003614:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	621a      	str	r2, [r3, #32]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	031b      	lsls	r3, r3, #12
 8003680:	b29b      	uxth	r3, r3
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800368e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	031b      	lsls	r3, r3, #12
 8003694:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f043 0307 	orr.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	431a      	orrs	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <TIM_ResetCallback+0x78>)
 8003784:	679a      	str	r2, [r3, #120]	; 0x78
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <TIM_ResetCallback+0x7c>)
 800378a:	67da      	str	r2, [r3, #124]	; 0x7c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1a      	ldr	r2, [pc, #104]	; (80037f8 <TIM_ResetCallback+0x80>)
 8003790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a19      	ldr	r2, [pc, #100]	; (80037fc <TIM_ResetCallback+0x84>)
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <TIM_ResetCallback+0x88>)
 80037a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <TIM_ResetCallback+0x8c>)
 80037a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <TIM_ResetCallback+0x90>)
 80037b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <TIM_ResetCallback+0x94>)
 80037b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a14      	ldr	r2, [pc, #80]	; (8003810 <TIM_ResetCallback+0x98>)
 80037c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <TIM_ResetCallback+0x9c>)
 80037c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <TIM_ResetCallback+0xa0>)
 80037d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a11      	ldr	r2, [pc, #68]	; (800381c <TIM_ResetCallback+0xa4>)
 80037d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <TIM_ResetCallback+0xa8>)
 80037e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	08002ba5 	.word	0x08002ba5
 80037f4:	08002bb9 	.word	0x08002bb9
 80037f8:	08002c31 	.word	0x08002c31
 80037fc:	08002c45 	.word	0x08002c45
 8003800:	08002be1 	.word	0x08002be1
 8003804:	08002bf5 	.word	0x08002bf5
 8003808:	08002bcd 	.word	0x08002bcd
 800380c:	08002c09 	.word	0x08002c09
 8003810:	08002c1d 	.word	0x08002c1d
 8003814:	08002c59 	.word	0x08002c59
 8003818:	0800391d 	.word	0x0800391d
 800381c:	08003931 	.word	0x08003931
 8003820:	08003945 	.word	0x08003945

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e05a      	b.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d022      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d01d      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d018      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10c      	bne.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40010400 	.word	0x40010400
 8003914:	40014000 	.word	0x40014000
 8003918:	40001800 	.word	0x40001800

0800391c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e03f      	b.n	80039ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fb94 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2224      	movs	r2, #36	; 0x24
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f9b1 	bl	8003d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b088      	sub	sp, #32
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 8083 	bne.w	8003b1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_UART_Transmit+0x2e>
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e07b      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Transmit+0x40>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e074      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	; 0x21
 8003a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fc88 	bl	800135c <HAL_GetTick>
 8003a4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a62:	e042      	b.n	8003aea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d122      	bne.n	8003ac2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8f2 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e042      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	e017      	b.n	8003aea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	e013      	b.n	8003aea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f8cf 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e01f      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	60ba      	str	r2, [r7, #8]
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1b7      	bne.n	8003a64 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2140      	movs	r1, #64	; 0x40
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8b6 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e006      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	f040 8090 	bne.w	8003c66 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_Receive+0x2e>
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e088      	b.n	8003c68 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Receive+0x40>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e081      	b.n	8003c68 <HAL_UART_Receive+0x144>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2222      	movs	r2, #34	; 0x22
 8003b76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fbef 	bl	800135c <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b94:	e05c      	b.n	8003c50 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d12b      	bne.n	8003c06 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2120      	movs	r1, #32
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f859 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e04f      	b.n	8003c68 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10c      	bne.n	8003bee <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3302      	adds	r3, #2
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	e030      	b.n	8003c50 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	e024      	b.n	8003c50 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2120      	movs	r1, #32
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f82d 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e023      	b.n	8003c68 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	60ba      	str	r2, [r7, #8]
 8003c34:	b2ca      	uxtb	r2, r1
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	e00a      	b.n	8003c50 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d19d      	bne.n	8003b96 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c80:	e02c      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d028      	beq.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c90:	f7fd fb64 	bl	800135c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d21d      	bcs.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e00f      	b.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d0c3      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d46:	f023 030c 	bic.w	r3, r3, #12
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	f040 818b 	bne.w	800408c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4ac1      	ldr	r2, [pc, #772]	; (8004080 <UART_SetConfig+0x37c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d005      	beq.n	8003d8c <UART_SetConfig+0x88>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4abf      	ldr	r2, [pc, #764]	; (8004084 <UART_SetConfig+0x380>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	f040 80bd 	bne.w	8003f06 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d8c:	f7fe fa0e 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003d90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	461d      	mov	r5, r3
 8003d96:	f04f 0600 	mov.w	r6, #0
 8003d9a:	46a8      	mov	r8, r5
 8003d9c:	46b1      	mov	r9, r6
 8003d9e:	eb18 0308 	adds.w	r3, r8, r8
 8003da2:	eb49 0409 	adc.w	r4, r9, r9
 8003da6:	4698      	mov	r8, r3
 8003da8:	46a1      	mov	r9, r4
 8003daa:	eb18 0805 	adds.w	r8, r8, r5
 8003dae:	eb49 0906 	adc.w	r9, r9, r6
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4691      	mov	r9, r2
 8003dca:	eb18 0005 	adds.w	r0, r8, r5
 8003dce:	eb49 0106 	adc.w	r1, r9, r6
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	f04f 0600 	mov.w	r6, #0
 8003ddc:	196b      	adds	r3, r5, r5
 8003dde:	eb46 0406 	adc.w	r4, r6, r6
 8003de2:	461a      	mov	r2, r3
 8003de4:	4623      	mov	r3, r4
 8003de6:	f7fc fa43 	bl	8000270 <__aeabi_uldivmod>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	461a      	mov	r2, r3
 8003df0:	4ba5      	ldr	r3, [pc, #660]	; (8004088 <UART_SetConfig+0x384>)
 8003df2:	fba3 2302 	umull	r2, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	461d      	mov	r5, r3
 8003e00:	f04f 0600 	mov.w	r6, #0
 8003e04:	46a9      	mov	r9, r5
 8003e06:	46b2      	mov	sl, r6
 8003e08:	eb19 0309 	adds.w	r3, r9, r9
 8003e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e10:	4699      	mov	r9, r3
 8003e12:	46a2      	mov	sl, r4
 8003e14:	eb19 0905 	adds.w	r9, r9, r5
 8003e18:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e30:	4689      	mov	r9, r1
 8003e32:	4692      	mov	sl, r2
 8003e34:	eb19 0005 	adds.w	r0, r9, r5
 8003e38:	eb4a 0106 	adc.w	r1, sl, r6
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	461d      	mov	r5, r3
 8003e42:	f04f 0600 	mov.w	r6, #0
 8003e46:	196b      	adds	r3, r5, r5
 8003e48:	eb46 0406 	adc.w	r4, r6, r6
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	f7fc fa0e 	bl	8000270 <__aeabi_uldivmod>
 8003e54:	4603      	mov	r3, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b8b      	ldr	r3, [pc, #556]	; (8004088 <UART_SetConfig+0x384>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a86      	ldr	r2, [pc, #536]	; (8004088 <UART_SetConfig+0x384>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e7c:	4498      	add	r8, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	461d      	mov	r5, r3
 8003e82:	f04f 0600 	mov.w	r6, #0
 8003e86:	46a9      	mov	r9, r5
 8003e88:	46b2      	mov	sl, r6
 8003e8a:	eb19 0309 	adds.w	r3, r9, r9
 8003e8e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e92:	4699      	mov	r9, r3
 8003e94:	46a2      	mov	sl, r4
 8003e96:	eb19 0905 	adds.w	r9, r9, r5
 8003e9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb2:	4689      	mov	r9, r1
 8003eb4:	4692      	mov	sl, r2
 8003eb6:	eb19 0005 	adds.w	r0, r9, r5
 8003eba:	eb4a 0106 	adc.w	r1, sl, r6
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	f04f 0600 	mov.w	r6, #0
 8003ec8:	196b      	adds	r3, r5, r5
 8003eca:	eb46 0406 	adc.w	r4, r6, r6
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4623      	mov	r3, r4
 8003ed2:	f7fc f9cd 	bl	8000270 <__aeabi_uldivmod>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	460c      	mov	r4, r1
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <UART_SetConfig+0x384>)
 8003ede:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2164      	movs	r1, #100	; 0x64
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	3332      	adds	r3, #50	; 0x32
 8003ef0:	4a65      	ldr	r2, [pc, #404]	; (8004088 <UART_SetConfig+0x384>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 0207 	and.w	r2, r3, #7
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4442      	add	r2, r8
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	e26f      	b.n	80043e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7fe f93d 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8003f0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	461d      	mov	r5, r3
 8003f10:	f04f 0600 	mov.w	r6, #0
 8003f14:	46a8      	mov	r8, r5
 8003f16:	46b1      	mov	r9, r6
 8003f18:	eb18 0308 	adds.w	r3, r8, r8
 8003f1c:	eb49 0409 	adc.w	r4, r9, r9
 8003f20:	4698      	mov	r8, r3
 8003f22:	46a1      	mov	r9, r4
 8003f24:	eb18 0805 	adds.w	r8, r8, r5
 8003f28:	eb49 0906 	adc.w	r9, r9, r6
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f40:	4688      	mov	r8, r1
 8003f42:	4691      	mov	r9, r2
 8003f44:	eb18 0005 	adds.w	r0, r8, r5
 8003f48:	eb49 0106 	adc.w	r1, r9, r6
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	461d      	mov	r5, r3
 8003f52:	f04f 0600 	mov.w	r6, #0
 8003f56:	196b      	adds	r3, r5, r5
 8003f58:	eb46 0406 	adc.w	r4, r6, r6
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	f7fc f986 	bl	8000270 <__aeabi_uldivmod>
 8003f64:	4603      	mov	r3, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b47      	ldr	r3, [pc, #284]	; (8004088 <UART_SetConfig+0x384>)
 8003f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	461d      	mov	r5, r3
 8003f7a:	f04f 0600 	mov.w	r6, #0
 8003f7e:	46a9      	mov	r9, r5
 8003f80:	46b2      	mov	sl, r6
 8003f82:	eb19 0309 	adds.w	r3, r9, r9
 8003f86:	eb4a 040a 	adc.w	r4, sl, sl
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	46a2      	mov	sl, r4
 8003f8e:	eb19 0905 	adds.w	r9, r9, r5
 8003f92:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003faa:	4689      	mov	r9, r1
 8003fac:	4692      	mov	sl, r2
 8003fae:	eb19 0005 	adds.w	r0, r9, r5
 8003fb2:	eb4a 0106 	adc.w	r1, sl, r6
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	461d      	mov	r5, r3
 8003fbc:	f04f 0600 	mov.w	r6, #0
 8003fc0:	196b      	adds	r3, r5, r5
 8003fc2:	eb46 0406 	adc.w	r4, r6, r6
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4623      	mov	r3, r4
 8003fca:	f7fc f951 	bl	8000270 <__aeabi_uldivmod>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <UART_SetConfig+0x384>)
 8003fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2164      	movs	r1, #100	; 0x64
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a27      	ldr	r2, [pc, #156]	; (8004088 <UART_SetConfig+0x384>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff6:	4498      	add	r8, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	f04f 0600 	mov.w	r6, #0
 8004000:	46a9      	mov	r9, r5
 8004002:	46b2      	mov	sl, r6
 8004004:	eb19 0309 	adds.w	r3, r9, r9
 8004008:	eb4a 040a 	adc.w	r4, sl, sl
 800400c:	4699      	mov	r9, r3
 800400e:	46a2      	mov	sl, r4
 8004010:	eb19 0905 	adds.w	r9, r9, r5
 8004014:	eb4a 0a06 	adc.w	sl, sl, r6
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402c:	4689      	mov	r9, r1
 800402e:	4692      	mov	sl, r2
 8004030:	eb19 0005 	adds.w	r0, r9, r5
 8004034:	eb4a 0106 	adc.w	r1, sl, r6
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	461d      	mov	r5, r3
 800403e:	f04f 0600 	mov.w	r6, #0
 8004042:	196b      	adds	r3, r5, r5
 8004044:	eb46 0406 	adc.w	r4, r6, r6
 8004048:	461a      	mov	r2, r3
 800404a:	4623      	mov	r3, r4
 800404c:	f7fc f910 	bl	8000270 <__aeabi_uldivmod>
 8004050:	4603      	mov	r3, r0
 8004052:	460c      	mov	r4, r1
 8004054:	461a      	mov	r2, r3
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <UART_SetConfig+0x384>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <UART_SetConfig+0x384>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4442      	add	r2, r8
 800407c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800407e:	e1b2      	b.n	80043e6 <UART_SetConfig+0x6e2>
 8004080:	40011000 	.word	0x40011000
 8004084:	40011400 	.word	0x40011400
 8004088:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4ad7      	ldr	r2, [pc, #860]	; (80043f0 <UART_SetConfig+0x6ec>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d005      	beq.n	80040a2 <UART_SetConfig+0x39e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4ad6      	ldr	r2, [pc, #856]	; (80043f4 <UART_SetConfig+0x6f0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 80d1 	bne.w	8004244 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a2:	f7fe f883 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 80040a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	469a      	mov	sl, r3
 80040ac:	f04f 0b00 	mov.w	fp, #0
 80040b0:	46d0      	mov	r8, sl
 80040b2:	46d9      	mov	r9, fp
 80040b4:	eb18 0308 	adds.w	r3, r8, r8
 80040b8:	eb49 0409 	adc.w	r4, r9, r9
 80040bc:	4698      	mov	r8, r3
 80040be:	46a1      	mov	r9, r4
 80040c0:	eb18 080a 	adds.w	r8, r8, sl
 80040c4:	eb49 090b 	adc.w	r9, r9, fp
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040dc:	4688      	mov	r8, r1
 80040de:	4691      	mov	r9, r2
 80040e0:	eb1a 0508 	adds.w	r5, sl, r8
 80040e4:	eb4b 0609 	adc.w	r6, fp, r9
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	0094      	lsls	r4, r2, #2
 80040fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004100:	008b      	lsls	r3, r1, #2
 8004102:	461a      	mov	r2, r3
 8004104:	4623      	mov	r3, r4
 8004106:	4628      	mov	r0, r5
 8004108:	4631      	mov	r1, r6
 800410a:	f7fc f8b1 	bl	8000270 <__aeabi_uldivmod>
 800410e:	4603      	mov	r3, r0
 8004110:	460c      	mov	r4, r1
 8004112:	461a      	mov	r2, r3
 8004114:	4bb8      	ldr	r3, [pc, #736]	; (80043f8 <UART_SetConfig+0x6f4>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	469b      	mov	fp, r3
 8004124:	f04f 0c00 	mov.w	ip, #0
 8004128:	46d9      	mov	r9, fp
 800412a:	46e2      	mov	sl, ip
 800412c:	eb19 0309 	adds.w	r3, r9, r9
 8004130:	eb4a 040a 	adc.w	r4, sl, sl
 8004134:	4699      	mov	r9, r3
 8004136:	46a2      	mov	sl, r4
 8004138:	eb19 090b 	adds.w	r9, r9, fp
 800413c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004150:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004154:	4689      	mov	r9, r1
 8004156:	4692      	mov	sl, r2
 8004158:	eb1b 0509 	adds.w	r5, fp, r9
 800415c:	eb4c 060a 	adc.w	r6, ip, sl
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4619      	mov	r1, r3
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	f04f 0400 	mov.w	r4, #0
 8004172:	0094      	lsls	r4, r2, #2
 8004174:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004178:	008b      	lsls	r3, r1, #2
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	4628      	mov	r0, r5
 8004180:	4631      	mov	r1, r6
 8004182:	f7fc f875 	bl	8000270 <__aeabi_uldivmod>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	461a      	mov	r2, r3
 800418c:	4b9a      	ldr	r3, [pc, #616]	; (80043f8 <UART_SetConfig+0x6f4>)
 800418e:	fba3 1302 	umull	r1, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2164      	movs	r1, #100	; 0x64
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	3332      	adds	r3, #50	; 0x32
 80041a0:	4a95      	ldr	r2, [pc, #596]	; (80043f8 <UART_SetConfig+0x6f4>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	4498      	add	r8, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	469b      	mov	fp, r3
 80041b2:	f04f 0c00 	mov.w	ip, #0
 80041b6:	46d9      	mov	r9, fp
 80041b8:	46e2      	mov	sl, ip
 80041ba:	eb19 0309 	adds.w	r3, r9, r9
 80041be:	eb4a 040a 	adc.w	r4, sl, sl
 80041c2:	4699      	mov	r9, r3
 80041c4:	46a2      	mov	sl, r4
 80041c6:	eb19 090b 	adds.w	r9, r9, fp
 80041ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041e2:	4689      	mov	r9, r1
 80041e4:	4692      	mov	sl, r2
 80041e6:	eb1b 0509 	adds.w	r5, fp, r9
 80041ea:	eb4c 060a 	adc.w	r6, ip, sl
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4619      	mov	r1, r3
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	0094      	lsls	r4, r2, #2
 8004202:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004206:	008b      	lsls	r3, r1, #2
 8004208:	461a      	mov	r2, r3
 800420a:	4623      	mov	r3, r4
 800420c:	4628      	mov	r0, r5
 800420e:	4631      	mov	r1, r6
 8004210:	f7fc f82e 	bl	8000270 <__aeabi_uldivmod>
 8004214:	4603      	mov	r3, r0
 8004216:	460c      	mov	r4, r1
 8004218:	461a      	mov	r2, r3
 800421a:	4b77      	ldr	r3, [pc, #476]	; (80043f8 <UART_SetConfig+0x6f4>)
 800421c:	fba3 1302 	umull	r1, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	2164      	movs	r1, #100	; 0x64
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	3332      	adds	r3, #50	; 0x32
 800422e:	4a72      	ldr	r2, [pc, #456]	; (80043f8 <UART_SetConfig+0x6f4>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4442      	add	r2, r8
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	e0d0      	b.n	80043e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004244:	f7fd ff9e 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 8004248:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	469a      	mov	sl, r3
 800424e:	f04f 0b00 	mov.w	fp, #0
 8004252:	46d0      	mov	r8, sl
 8004254:	46d9      	mov	r9, fp
 8004256:	eb18 0308 	adds.w	r3, r8, r8
 800425a:	eb49 0409 	adc.w	r4, r9, r9
 800425e:	4698      	mov	r8, r3
 8004260:	46a1      	mov	r9, r4
 8004262:	eb18 080a 	adds.w	r8, r8, sl
 8004266:	eb49 090b 	adc.w	r9, r9, fp
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004276:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800427a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800427e:	4688      	mov	r8, r1
 8004280:	4691      	mov	r9, r2
 8004282:	eb1a 0508 	adds.w	r5, sl, r8
 8004286:	eb4b 0609 	adc.w	r6, fp, r9
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	0094      	lsls	r4, r2, #2
 800429e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	4631      	mov	r1, r6
 80042ac:	f7fb ffe0 	bl	8000270 <__aeabi_uldivmod>
 80042b0:	4603      	mov	r3, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <UART_SetConfig+0x6f4>)
 80042b8:	fba3 2302 	umull	r2, r3, r3, r2
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	469b      	mov	fp, r3
 80042c6:	f04f 0c00 	mov.w	ip, #0
 80042ca:	46d9      	mov	r9, fp
 80042cc:	46e2      	mov	sl, ip
 80042ce:	eb19 0309 	adds.w	r3, r9, r9
 80042d2:	eb4a 040a 	adc.w	r4, sl, sl
 80042d6:	4699      	mov	r9, r3
 80042d8:	46a2      	mov	sl, r4
 80042da:	eb19 090b 	adds.w	r9, r9, fp
 80042de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042e2:	f04f 0100 	mov.w	r1, #0
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042f6:	4689      	mov	r9, r1
 80042f8:	4692      	mov	sl, r2
 80042fa:	eb1b 0509 	adds.w	r5, fp, r9
 80042fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4619      	mov	r1, r3
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	0094      	lsls	r4, r2, #2
 8004316:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800431a:	008b      	lsls	r3, r1, #2
 800431c:	461a      	mov	r2, r3
 800431e:	4623      	mov	r3, r4
 8004320:	4628      	mov	r0, r5
 8004322:	4631      	mov	r1, r6
 8004324:	f7fb ffa4 	bl	8000270 <__aeabi_uldivmod>
 8004328:	4603      	mov	r3, r0
 800432a:	460c      	mov	r4, r1
 800432c:	461a      	mov	r2, r3
 800432e:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <UART_SetConfig+0x6f4>)
 8004330:	fba3 1302 	umull	r1, r3, r3, r2
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <UART_SetConfig+0x6f4>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434e:	4498      	add	r8, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	469b      	mov	fp, r3
 8004354:	f04f 0c00 	mov.w	ip, #0
 8004358:	46d9      	mov	r9, fp
 800435a:	46e2      	mov	sl, ip
 800435c:	eb19 0309 	adds.w	r3, r9, r9
 8004360:	eb4a 040a 	adc.w	r4, sl, sl
 8004364:	4699      	mov	r9, r3
 8004366:	46a2      	mov	sl, r4
 8004368:	eb19 090b 	adds.w	r9, r9, fp
 800436c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800437c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004384:	4689      	mov	r9, r1
 8004386:	4692      	mov	sl, r2
 8004388:	eb1b 0509 	adds.w	r5, fp, r9
 800438c:	eb4c 060a 	adc.w	r6, ip, sl
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4619      	mov	r1, r3
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	f04f 0400 	mov.w	r4, #0
 80043a2:	0094      	lsls	r4, r2, #2
 80043a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	461a      	mov	r2, r3
 80043ac:	4623      	mov	r3, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	4631      	mov	r1, r6
 80043b2:	f7fb ff5d 	bl	8000270 <__aeabi_uldivmod>
 80043b6:	4603      	mov	r3, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <UART_SetConfig+0x6f4>)
 80043be:	fba3 1302 	umull	r1, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2164      	movs	r1, #100	; 0x64
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a09      	ldr	r2, [pc, #36]	; (80043f8 <UART_SetConfig+0x6f4>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4442      	add	r2, r8
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	e7ff      	b.n	80043e6 <UART_SetConfig+0x6e2>
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f0:	40011000 	.word	0x40011000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	51eb851f 	.word	0x51eb851f

080043fc <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth>:
 *      Author: foton
 */

#include "PWMCapturer.h"

PWMCapturer::PWMCapturer(TIM_HandleTypeDef *htim,
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	460b      	mov	r3, r1
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	4613      	mov	r3, r2
 8004410:	80bb      	strh	r3, [r7, #4]
		uint8_t channel,
		uint16_t min_value,
		uint16_t mid_value,
		uint16_t max_value,
		uint8_t measurement_error)
 8004412:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xb8>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	809a      	strh	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	80da      	strh	r2, [r3, #6]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	811a      	strh	r2, [r3, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	611a      	str	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	615a      	str	r2, [r3, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	761a      	strb	r2, [r3, #24]
{
	this->min_value = min_value;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	88ba      	ldrh	r2, [r7, #4]
 8004446:	811a      	strh	r2, [r3, #8]
	this->max_value = max_value;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8bba      	ldrh	r2, [r7, #28]
 800444c:	809a      	strh	r2, [r3, #4]
	this->mid_value = mid_value;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8b3a      	ldrh	r2, [r7, #24]
 8004452:	80da      	strh	r2, [r3, #6]
	this->measurement_error = measurement_error;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f897 2020 	ldrb.w	r2, [r7, #32]
 800445a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	this->htim = htim;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	621a      	str	r2, [r3, #32]
	switch(channel)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	3b01      	subs	r3, #1
 8004468:	2b03      	cmp	r3, #3
 800446a:	d81b      	bhi.n	80044a4 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0x78>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004485 	.word	0x08004485
 8004478:	0800448d 	.word	0x0800448d
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449d 	.word	0x0800449d
	{
		case 1:
			this->channel = TIM_CHANNEL_1;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
			break;
 800448a:	e00b      	b.n	80044a4 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 2:
			this->channel = TIM_CHANNEL_2;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2204      	movs	r2, #4
 8004490:	61da      	str	r2, [r3, #28]
			break;
 8004492:	e007      	b.n	80044a4 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 3:
			this->channel = TIM_CHANNEL_3;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2208      	movs	r2, #8
 8004498:	61da      	str	r2, [r3, #28]
			break;
 800449a:	e003      	b.n	80044a4 <_ZN11PWMCapturerC1EP19__TIM_HandleTypeDefhttth+0xa8>
		case 4:
			this->channel = TIM_CHANNEL_4;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	220c      	movs	r2, #12
 80044a0:	61da      	str	r2, [r3, #28]
			break;
 80044a2:	bf00      	nop
	}
}
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	080052a0 	.word	0x080052a0

080044b8 <_ZN11PWMCapturerD1Ev>:
		uint16_t max_value,
		uint8_t measurement_error)
	: PWMCapturer(htim, channel, min_value, min_value + (max_value - min_value)/2, max_value, measurement_error)
{}

PWMCapturer::~PWMCapturer() {
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <_ZN11PWMCapturerD1Ev+0x1c>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	080052a0 	.word	0x080052a0

080044d8 <_ZN11PWMCapturerD0Ev>:
PWMCapturer::~PWMCapturer() {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
}
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ffe9 	bl	80044b8 <_ZN11PWMCapturerD1Ev>
 80044e6:	2128      	movs	r1, #40	; 0x28
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f98d 	bl	8004808 <_ZdlPvj>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN11PWMCapturer19calculatePulseWidthEv>:
{
	return mid_value;
}

void PWMCapturer::calculatePulseWidth()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	if(!is_First_Captured) //if the first value is not captured
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7e1b      	ldrb	r3, [r3, #24]
 8004504:	f083 0301 	eor.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d07c      	beq.n	8004608 <_ZN11PWMCapturer19calculatePulseWidthEv+0x110>
	{
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, channel); //read the first value
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fe faff 	bl	8002b1c <HAL_TIM_ReadCapturedValue>
 800451e:	4602      	mov	r2, r0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
		is_First_Captured = true;  //set the first captured as true
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	761a      	strb	r2, [r3, #24]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <_ZN11PWMCapturer19calculatePulseWidthEv+0x50>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 020a 	bic.w	r2, r2, #10
 8004544:	621a      	str	r2, [r3, #32]
 8004546:	e027      	b.n	8004598 <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d10a      	bne.n	8004566 <_ZN11PWMCapturer19calculatePulseWidthEv+0x6e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a1a      	ldr	r2, [r3, #32]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004562:	621a      	str	r2, [r3, #32]
 8004564:	e018      	b.n	8004598 <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2b08      	cmp	r3, #8
 800456c:	d10a      	bne.n	8004584 <_ZN11PWMCapturer19calculatePulseWidthEv+0x8c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8004580:	621a      	str	r2, [r3, #32]
 8004582:	e009      	b.n	8004598 <_ZN11PWMCapturer19calculatePulseWidthEv+0xa0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8004596:	621a      	str	r2, [r3, #32]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <_ZN11PWMCapturer19calculatePulseWidthEv+0xbe>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0202 	orr.w	r2, r2, #2
 80045b2:	621a      	str	r2, [r3, #32]
			difference = IC_Val2 - IC_Val1;

		is_First_Captured = false; //set it back to false
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
	}
}
 80045b4:	e0a9      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d10a      	bne.n	80045d4 <_ZN11PWMCapturer19calculatePulseWidthEv+0xdc>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6a1a      	ldr	r2, [r3, #32]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0220 	orr.w	r2, r2, #32
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	e09a      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d10a      	bne.n	80045f2 <_ZN11PWMCapturer19calculatePulseWidthEv+0xfa>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	e08b      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_FALLING); //Now change the polarity to falling edge
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1a      	ldr	r2, [r3, #32]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	e080      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, channel);  //read second value
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fe fa82 	bl	8002b1c <HAL_TIM_ReadCapturedValue>
 8004618:	4602      	mov	r2, r0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	611a      	str	r2, [r3, #16]
		if (IC_Val2 > IC_Val1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d906      	bls.n	8004638 <_ZN11PWMCapturer19calculatePulseWidthEv+0x140>
			difference = IC_Val2 - IC_Val1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	1ad2      	subs	r2, r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	615a      	str	r2, [r3, #20]
		is_First_Captured = false; //set it back to false
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	761a      	strb	r2, [r3, #24]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <_ZN11PWMCapturer19calculatePulseWidthEv+0x164>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 020a 	bic.w	r2, r2, #10
 8004658:	621a      	str	r2, [r3, #32]
 800465a:	e027      	b.n	80046ac <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d10a      	bne.n	800467a <_ZN11PWMCapturer19calculatePulseWidthEv+0x182>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004676:	621a      	str	r2, [r3, #32]
 8004678:	e018      	b.n	80046ac <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	2b08      	cmp	r3, #8
 8004680:	d10a      	bne.n	8004698 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1a0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8004694:	621a      	str	r2, [r3, #32]
 8004696:	e009      	b.n	80046ac <_ZN11PWMCapturer19calculatePulseWidthEv+0x1b4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1ce>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a12      	ldr	r2, [r2, #32]
 80046c2:	621a      	str	r2, [r3, #32]
}
 80046c4:	e021      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d108      	bne.n	80046e0 <_ZN11PWMCapturer19calculatePulseWidthEv+0x1e8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a12      	ldr	r2, [r2, #32]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	e014      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d108      	bne.n	80046fa <_ZN11PWMCapturer19calculatePulseWidthEv+0x202>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a12      	ldr	r2, [r2, #32]
 80046f6:	621a      	str	r2, [r3, #32]
}
 80046f8:	e007      	b.n	800470a <_ZN11PWMCapturer19calculatePulseWidthEv+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, channel, TIM_INPUTCHANNELPOLARITY_RISING); //set polarity to rising edge
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a12      	ldr	r2, [r2, #32]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <_ZN11PWMCapturer16getPulseWidthDifEv>:

uint32_t PWMCapturer::getPulseWidthDif()
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
	return mid_value - (difference - mid_value);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	88db      	ldrh	r3, [r3, #6]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	88db      	ldrh	r3, [r3, #6]
 8004724:	4619      	mov	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	1acb      	subs	r3, r1, r3
 800472c:	4413      	add	r3, r2
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_ZN5ServoC1EP11TIM_TypeDefhttt>:
#include "Servo.h"

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel, uint16_t min_PWM_value, uint16_t max_PWM_value, uint16_t max_Angle)
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	4611      	mov	r1, r2
 8004746:	461a      	mov	r2, r3
 8004748:	460b      	mov	r3, r1
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	4613      	mov	r3, r2
 800474e:	80bb      	strh	r3, [r7, #4]
{
	this->TIM = TIM;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	605a      	str	r2, [r3, #4]
	this->channel = channel;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	79fa      	ldrb	r2, [r7, #7]
 800475a:	721a      	strb	r2, [r3, #8]
	this->min_PWM_value = min_PWM_value;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88ba      	ldrh	r2, [r7, #4]
 8004760:	805a      	strh	r2, [r3, #2]
	this->max_PWM_value = max_PWM_value;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8b3a      	ldrh	r2, [r7, #24]
 8004766:	801a      	strh	r2, [r3, #0]
	this->max_Angle = max_Angle;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8bba      	ldrh	r2, [r7, #28]
 800476c:	815a      	strh	r2, [r3, #10]
}
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <_ZN5ServoC1EP11TIM_TypeDefh>:

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel, uint16_t min_PWM_value, uint16_t max_PWM_value)
	: Servo(TIM, channel, min_PWM_value, max_PWM_value, 180)
{}

Servo::Servo(TIM_TypeDef *TIM, uint8_t channel)
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
	: Servo(TIM, channel, 0, 0, 0)
 800478a:	79fa      	ldrb	r2, [r7, #7]
 800478c:	2300      	movs	r3, #0
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	2300      	movs	r3, #0
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ffce 	bl	800473a <_ZN5ServoC1EP11TIM_TypeDefhttt>
{}
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZN5Servo23setPositionMicroSecondsEm>:

void Servo::setPositionMicroSeconds(uint32_t position)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	switch (this->channel)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7a1b      	ldrb	r3, [r3, #8]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d81f      	bhi.n	80047fc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <_ZN5Servo23setPositionMicroSecondsEm+0x1c>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047df 	.word	0x080047df
 80047cc:	080047e9 	.word	0x080047e9
 80047d0:	080047f3 	.word	0x080047f3
	{
		case 1:
			this->TIM->CCR1 = position;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80047dc:	e00e      	b.n	80047fc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 2:
			this->TIM->CCR2 = position;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80047e6:	e009      	b.n	80047fc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 3:
			this->TIM->CCR3 = position;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80047f0:	e004      	b.n	80047fc <_ZN5Servo23setPositionMicroSecondsEm+0x54>
		case 4:
			this->TIM->CCR4 = position;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80047fa:	bf00      	nop
	}
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_ZdlPvj>:
 8004808:	f000 b800 	b.w	800480c <_ZdlPv>

0800480c <_ZdlPv>:
 800480c:	f000 b82a 	b.w	8004864 <free>

08004810 <__errno>:
 8004810:	4b01      	ldr	r3, [pc, #4]	; (8004818 <__errno+0x8>)
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	2000000c 	.word	0x2000000c

0800481c <__libc_init_array>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	4e0d      	ldr	r6, [pc, #52]	; (8004854 <__libc_init_array+0x38>)
 8004820:	4c0d      	ldr	r4, [pc, #52]	; (8004858 <__libc_init_array+0x3c>)
 8004822:	1ba4      	subs	r4, r4, r6
 8004824:	10a4      	asrs	r4, r4, #2
 8004826:	2500      	movs	r5, #0
 8004828:	42a5      	cmp	r5, r4
 800482a:	d109      	bne.n	8004840 <__libc_init_array+0x24>
 800482c:	4e0b      	ldr	r6, [pc, #44]	; (800485c <__libc_init_array+0x40>)
 800482e:	4c0c      	ldr	r4, [pc, #48]	; (8004860 <__libc_init_array+0x44>)
 8004830:	f000 fc30 	bl	8005094 <_init>
 8004834:	1ba4      	subs	r4, r4, r6
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	2500      	movs	r5, #0
 800483a:	42a5      	cmp	r5, r4
 800483c:	d105      	bne.n	800484a <__libc_init_array+0x2e>
 800483e:	bd70      	pop	{r4, r5, r6, pc}
 8004840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004844:	4798      	blx	r3
 8004846:	3501      	adds	r5, #1
 8004848:	e7ee      	b.n	8004828 <__libc_init_array+0xc>
 800484a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800484e:	4798      	blx	r3
 8004850:	3501      	adds	r5, #1
 8004852:	e7f2      	b.n	800483a <__libc_init_array+0x1e>
 8004854:	080052e4 	.word	0x080052e4
 8004858:	080052e4 	.word	0x080052e4
 800485c:	080052e4 	.word	0x080052e4
 8004860:	080052ec 	.word	0x080052ec

08004864 <free>:
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <free+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f000 b817 	b.w	800489c <_free_r>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <memcpy>:
 8004874:	b510      	push	{r4, lr}
 8004876:	1e43      	subs	r3, r0, #1
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	bd10      	pop	{r4, pc}
 8004880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	e7f7      	b.n	800487a <memcpy+0x6>

0800488a <memset>:
 800488a:	4402      	add	r2, r0
 800488c:	4603      	mov	r3, r0
 800488e:	4293      	cmp	r3, r2
 8004890:	d100      	bne.n	8004894 <memset+0xa>
 8004892:	4770      	bx	lr
 8004894:	f803 1b01 	strb.w	r1, [r3], #1
 8004898:	e7f9      	b.n	800488e <memset+0x4>
	...

0800489c <_free_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4605      	mov	r5, r0
 80048a0:	2900      	cmp	r1, #0
 80048a2:	d045      	beq.n	8004930 <_free_r+0x94>
 80048a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a8:	1f0c      	subs	r4, r1, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	18e4      	addlt	r4, r4, r3
 80048b0:	f000 f8cc 	bl	8004a4c <__malloc_lock>
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <_free_r+0x98>)
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	4610      	mov	r0, r2
 80048ba:	b933      	cbnz	r3, 80048ca <_free_r+0x2e>
 80048bc:	6063      	str	r3, [r4, #4]
 80048be:	6014      	str	r4, [r2, #0]
 80048c0:	4628      	mov	r0, r5
 80048c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048c6:	f000 b8c2 	b.w	8004a4e <__malloc_unlock>
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	d90c      	bls.n	80048e8 <_free_r+0x4c>
 80048ce:	6821      	ldr	r1, [r4, #0]
 80048d0:	1862      	adds	r2, r4, r1
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bf04      	itt	eq
 80048d6:	681a      	ldreq	r2, [r3, #0]
 80048d8:	685b      	ldreq	r3, [r3, #4]
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	bf04      	itt	eq
 80048de:	1852      	addeq	r2, r2, r1
 80048e0:	6022      	streq	r2, [r4, #0]
 80048e2:	6004      	str	r4, [r0, #0]
 80048e4:	e7ec      	b.n	80048c0 <_free_r+0x24>
 80048e6:	4613      	mov	r3, r2
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	b10a      	cbz	r2, 80048f0 <_free_r+0x54>
 80048ec:	42a2      	cmp	r2, r4
 80048ee:	d9fa      	bls.n	80048e6 <_free_r+0x4a>
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	1858      	adds	r0, r3, r1
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d10b      	bne.n	8004910 <_free_r+0x74>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	4401      	add	r1, r0
 80048fc:	1858      	adds	r0, r3, r1
 80048fe:	4282      	cmp	r2, r0
 8004900:	6019      	str	r1, [r3, #0]
 8004902:	d1dd      	bne.n	80048c0 <_free_r+0x24>
 8004904:	6810      	ldr	r0, [r2, #0]
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	4401      	add	r1, r0
 800490c:	6019      	str	r1, [r3, #0]
 800490e:	e7d7      	b.n	80048c0 <_free_r+0x24>
 8004910:	d902      	bls.n	8004918 <_free_r+0x7c>
 8004912:	230c      	movs	r3, #12
 8004914:	602b      	str	r3, [r5, #0]
 8004916:	e7d3      	b.n	80048c0 <_free_r+0x24>
 8004918:	6820      	ldr	r0, [r4, #0]
 800491a:	1821      	adds	r1, r4, r0
 800491c:	428a      	cmp	r2, r1
 800491e:	bf04      	itt	eq
 8004920:	6811      	ldreq	r1, [r2, #0]
 8004922:	6852      	ldreq	r2, [r2, #4]
 8004924:	6062      	str	r2, [r4, #4]
 8004926:	bf04      	itt	eq
 8004928:	1809      	addeq	r1, r1, r0
 800492a:	6021      	streq	r1, [r4, #0]
 800492c:	605c      	str	r4, [r3, #4]
 800492e:	e7c7      	b.n	80048c0 <_free_r+0x24>
 8004930:	bd38      	pop	{r3, r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	200001a4 	.word	0x200001a4

08004938 <_malloc_r>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	1ccd      	adds	r5, r1, #3
 800493c:	f025 0503 	bic.w	r5, r5, #3
 8004940:	3508      	adds	r5, #8
 8004942:	2d0c      	cmp	r5, #12
 8004944:	bf38      	it	cc
 8004946:	250c      	movcc	r5, #12
 8004948:	2d00      	cmp	r5, #0
 800494a:	4606      	mov	r6, r0
 800494c:	db01      	blt.n	8004952 <_malloc_r+0x1a>
 800494e:	42a9      	cmp	r1, r5
 8004950:	d903      	bls.n	800495a <_malloc_r+0x22>
 8004952:	230c      	movs	r3, #12
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	2000      	movs	r0, #0
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	f000 f877 	bl	8004a4c <__malloc_lock>
 800495e:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <_malloc_r+0xac>)
 8004960:	6814      	ldr	r4, [r2, #0]
 8004962:	4621      	mov	r1, r4
 8004964:	b991      	cbnz	r1, 800498c <_malloc_r+0x54>
 8004966:	4c20      	ldr	r4, [pc, #128]	; (80049e8 <_malloc_r+0xb0>)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	b91b      	cbnz	r3, 8004974 <_malloc_r+0x3c>
 800496c:	4630      	mov	r0, r6
 800496e:	f000 f83d 	bl	80049ec <_sbrk_r>
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	4629      	mov	r1, r5
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f838 	bl	80049ec <_sbrk_r>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d124      	bne.n	80049ca <_malloc_r+0x92>
 8004980:	230c      	movs	r3, #12
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f862 	bl	8004a4e <__malloc_unlock>
 800498a:	e7e4      	b.n	8004956 <_malloc_r+0x1e>
 800498c:	680b      	ldr	r3, [r1, #0]
 800498e:	1b5b      	subs	r3, r3, r5
 8004990:	d418      	bmi.n	80049c4 <_malloc_r+0x8c>
 8004992:	2b0b      	cmp	r3, #11
 8004994:	d90f      	bls.n	80049b6 <_malloc_r+0x7e>
 8004996:	600b      	str	r3, [r1, #0]
 8004998:	50cd      	str	r5, [r1, r3]
 800499a:	18cc      	adds	r4, r1, r3
 800499c:	4630      	mov	r0, r6
 800499e:	f000 f856 	bl	8004a4e <__malloc_unlock>
 80049a2:	f104 000b 	add.w	r0, r4, #11
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	f020 0007 	bic.w	r0, r0, #7
 80049ac:	1ac3      	subs	r3, r0, r3
 80049ae:	d0d3      	beq.n	8004958 <_malloc_r+0x20>
 80049b0:	425a      	negs	r2, r3
 80049b2:	50e2      	str	r2, [r4, r3]
 80049b4:	e7d0      	b.n	8004958 <_malloc_r+0x20>
 80049b6:	428c      	cmp	r4, r1
 80049b8:	684b      	ldr	r3, [r1, #4]
 80049ba:	bf16      	itet	ne
 80049bc:	6063      	strne	r3, [r4, #4]
 80049be:	6013      	streq	r3, [r2, #0]
 80049c0:	460c      	movne	r4, r1
 80049c2:	e7eb      	b.n	800499c <_malloc_r+0x64>
 80049c4:	460c      	mov	r4, r1
 80049c6:	6849      	ldr	r1, [r1, #4]
 80049c8:	e7cc      	b.n	8004964 <_malloc_r+0x2c>
 80049ca:	1cc4      	adds	r4, r0, #3
 80049cc:	f024 0403 	bic.w	r4, r4, #3
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d005      	beq.n	80049e0 <_malloc_r+0xa8>
 80049d4:	1a21      	subs	r1, r4, r0
 80049d6:	4630      	mov	r0, r6
 80049d8:	f000 f808 	bl	80049ec <_sbrk_r>
 80049dc:	3001      	adds	r0, #1
 80049de:	d0cf      	beq.n	8004980 <_malloc_r+0x48>
 80049e0:	6025      	str	r5, [r4, #0]
 80049e2:	e7db      	b.n	800499c <_malloc_r+0x64>
 80049e4:	200001a4 	.word	0x200001a4
 80049e8:	200001a8 	.word	0x200001a8

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4c06      	ldr	r4, [pc, #24]	; (8004a08 <_sbrk_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4605      	mov	r5, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	f7fc fbd4 	bl	80011a4 <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200001b0 	.word	0x200001b0

08004a0c <siprintf>:
 8004a0c:	b40e      	push	{r1, r2, r3}
 8004a0e:	b500      	push	{lr}
 8004a10:	b09c      	sub	sp, #112	; 0x70
 8004a12:	ab1d      	add	r3, sp, #116	; 0x74
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	9006      	str	r0, [sp, #24]
 8004a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a1c:	4809      	ldr	r0, [pc, #36]	; (8004a44 <siprintf+0x38>)
 8004a1e:	9107      	str	r1, [sp, #28]
 8004a20:	9104      	str	r1, [sp, #16]
 8004a22:	4909      	ldr	r1, [pc, #36]	; (8004a48 <siprintf+0x3c>)
 8004a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	a902      	add	r1, sp, #8
 8004a30:	f000 f868 	bl	8004b04 <_svfiprintf_r>
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	b01c      	add	sp, #112	; 0x70
 8004a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a40:	b003      	add	sp, #12
 8004a42:	4770      	bx	lr
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	ffff0208 	.word	0xffff0208

08004a4c <__malloc_lock>:
 8004a4c:	4770      	bx	lr

08004a4e <__malloc_unlock>:
 8004a4e:	4770      	bx	lr

08004a50 <__ssputs_r>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	688e      	ldr	r6, [r1, #8]
 8004a56:	429e      	cmp	r6, r3
 8004a58:	4682      	mov	sl, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	4690      	mov	r8, r2
 8004a5e:	4699      	mov	r9, r3
 8004a60:	d837      	bhi.n	8004ad2 <__ssputs_r+0x82>
 8004a62:	898a      	ldrh	r2, [r1, #12]
 8004a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a68:	d031      	beq.n	8004ace <__ssputs_r+0x7e>
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	6909      	ldr	r1, [r1, #16]
 8004a6e:	1a6f      	subs	r7, r5, r1
 8004a70:	6965      	ldr	r5, [r4, #20]
 8004a72:	2302      	movs	r3, #2
 8004a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a78:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a7c:	f109 0301 	add.w	r3, r9, #1
 8004a80:	443b      	add	r3, r7
 8004a82:	429d      	cmp	r5, r3
 8004a84:	bf38      	it	cc
 8004a86:	461d      	movcc	r5, r3
 8004a88:	0553      	lsls	r3, r2, #21
 8004a8a:	d530      	bpl.n	8004aee <__ssputs_r+0x9e>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7ff ff53 	bl	8004938 <_malloc_r>
 8004a92:	4606      	mov	r6, r0
 8004a94:	b950      	cbnz	r0, 8004aac <__ssputs_r+0x5c>
 8004a96:	230c      	movs	r3, #12
 8004a98:	f8ca 3000 	str.w	r3, [sl]
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aac:	463a      	mov	r2, r7
 8004aae:	6921      	ldr	r1, [r4, #16]
 8004ab0:	f7ff fee0 	bl	8004874 <memcpy>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	6126      	str	r6, [r4, #16]
 8004ac2:	6165      	str	r5, [r4, #20]
 8004ac4:	443e      	add	r6, r7
 8004ac6:	1bed      	subs	r5, r5, r7
 8004ac8:	6026      	str	r6, [r4, #0]
 8004aca:	60a5      	str	r5, [r4, #8]
 8004acc:	464e      	mov	r6, r9
 8004ace:	454e      	cmp	r6, r9
 8004ad0:	d900      	bls.n	8004ad4 <__ssputs_r+0x84>
 8004ad2:	464e      	mov	r6, r9
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	f000 fa93 	bl	8005004 <memmove>
 8004ade:	68a3      	ldr	r3, [r4, #8]
 8004ae0:	1b9b      	subs	r3, r3, r6
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	441e      	add	r6, r3
 8004ae8:	6026      	str	r6, [r4, #0]
 8004aea:	2000      	movs	r0, #0
 8004aec:	e7dc      	b.n	8004aa8 <__ssputs_r+0x58>
 8004aee:	462a      	mov	r2, r5
 8004af0:	f000 faa1 	bl	8005036 <_realloc_r>
 8004af4:	4606      	mov	r6, r0
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d1e2      	bne.n	8004ac0 <__ssputs_r+0x70>
 8004afa:	6921      	ldr	r1, [r4, #16]
 8004afc:	4650      	mov	r0, sl
 8004afe:	f7ff fecd 	bl	800489c <_free_r>
 8004b02:	e7c8      	b.n	8004a96 <__ssputs_r+0x46>

08004b04 <_svfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	461d      	mov	r5, r3
 8004b0a:	898b      	ldrh	r3, [r1, #12]
 8004b0c:	061f      	lsls	r7, r3, #24
 8004b0e:	b09d      	sub	sp, #116	; 0x74
 8004b10:	4680      	mov	r8, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	4616      	mov	r6, r2
 8004b16:	d50f      	bpl.n	8004b38 <_svfiprintf_r+0x34>
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	b96b      	cbnz	r3, 8004b38 <_svfiprintf_r+0x34>
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	f7ff ff0b 	bl	8004938 <_malloc_r>
 8004b22:	6020      	str	r0, [r4, #0]
 8004b24:	6120      	str	r0, [r4, #16]
 8004b26:	b928      	cbnz	r0, 8004b34 <_svfiprintf_r+0x30>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	f8c8 3000 	str.w	r3, [r8]
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	e0c8      	b.n	8004cc6 <_svfiprintf_r+0x1c2>
 8004b34:	2340      	movs	r3, #64	; 0x40
 8004b36:	6163      	str	r3, [r4, #20]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b42:	2330      	movs	r3, #48	; 0x30
 8004b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b48:	9503      	str	r5, [sp, #12]
 8004b4a:	f04f 0b01 	mov.w	fp, #1
 8004b4e:	4637      	mov	r7, r6
 8004b50:	463d      	mov	r5, r7
 8004b52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b56:	b10b      	cbz	r3, 8004b5c <_svfiprintf_r+0x58>
 8004b58:	2b25      	cmp	r3, #37	; 0x25
 8004b5a:	d13e      	bne.n	8004bda <_svfiprintf_r+0xd6>
 8004b5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b60:	d00b      	beq.n	8004b7a <_svfiprintf_r+0x76>
 8004b62:	4653      	mov	r3, sl
 8004b64:	4632      	mov	r2, r6
 8004b66:	4621      	mov	r1, r4
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f7ff ff71 	bl	8004a50 <__ssputs_r>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	f000 80a4 	beq.w	8004cbc <_svfiprintf_r+0x1b8>
 8004b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b76:	4453      	add	r3, sl
 8004b78:	9309      	str	r3, [sp, #36]	; 0x24
 8004b7a:	783b      	ldrb	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 809d 	beq.w	8004cbc <_svfiprintf_r+0x1b8>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b94:	931a      	str	r3, [sp, #104]	; 0x68
 8004b96:	462f      	mov	r7, r5
 8004b98:	2205      	movs	r2, #5
 8004b9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b9e:	4850      	ldr	r0, [pc, #320]	; (8004ce0 <_svfiprintf_r+0x1dc>)
 8004ba0:	f7fb fb16 	bl	80001d0 <memchr>
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	b9d0      	cbnz	r0, 8004bde <_svfiprintf_r+0xda>
 8004ba8:	06d9      	lsls	r1, r3, #27
 8004baa:	bf44      	itt	mi
 8004bac:	2220      	movmi	r2, #32
 8004bae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bb2:	071a      	lsls	r2, r3, #28
 8004bb4:	bf44      	itt	mi
 8004bb6:	222b      	movmi	r2, #43	; 0x2b
 8004bb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bbc:	782a      	ldrb	r2, [r5, #0]
 8004bbe:	2a2a      	cmp	r2, #42	; 0x2a
 8004bc0:	d015      	beq.n	8004bee <_svfiprintf_r+0xea>
 8004bc2:	9a07      	ldr	r2, [sp, #28]
 8004bc4:	462f      	mov	r7, r5
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	250a      	movs	r5, #10
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd0:	3b30      	subs	r3, #48	; 0x30
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	d94d      	bls.n	8004c72 <_svfiprintf_r+0x16e>
 8004bd6:	b1b8      	cbz	r0, 8004c08 <_svfiprintf_r+0x104>
 8004bd8:	e00f      	b.n	8004bfa <_svfiprintf_r+0xf6>
 8004bda:	462f      	mov	r7, r5
 8004bdc:	e7b8      	b.n	8004b50 <_svfiprintf_r+0x4c>
 8004bde:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <_svfiprintf_r+0x1dc>)
 8004be0:	1a80      	subs	r0, r0, r2
 8004be2:	fa0b f000 	lsl.w	r0, fp, r0
 8004be6:	4318      	orrs	r0, r3
 8004be8:	9004      	str	r0, [sp, #16]
 8004bea:	463d      	mov	r5, r7
 8004bec:	e7d3      	b.n	8004b96 <_svfiprintf_r+0x92>
 8004bee:	9a03      	ldr	r2, [sp, #12]
 8004bf0:	1d11      	adds	r1, r2, #4
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	9103      	str	r1, [sp, #12]
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	db01      	blt.n	8004bfe <_svfiprintf_r+0xfa>
 8004bfa:	9207      	str	r2, [sp, #28]
 8004bfc:	e004      	b.n	8004c08 <_svfiprintf_r+0x104>
 8004bfe:	4252      	negs	r2, r2
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	9207      	str	r2, [sp, #28]
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	783b      	ldrb	r3, [r7, #0]
 8004c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c0c:	d10c      	bne.n	8004c28 <_svfiprintf_r+0x124>
 8004c0e:	787b      	ldrb	r3, [r7, #1]
 8004c10:	2b2a      	cmp	r3, #42	; 0x2a
 8004c12:	d133      	bne.n	8004c7c <_svfiprintf_r+0x178>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	9203      	str	r2, [sp, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bfb8      	it	lt
 8004c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c24:	3702      	adds	r7, #2
 8004c26:	9305      	str	r3, [sp, #20]
 8004c28:	4d2e      	ldr	r5, [pc, #184]	; (8004ce4 <_svfiprintf_r+0x1e0>)
 8004c2a:	7839      	ldrb	r1, [r7, #0]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb face 	bl	80001d0 <memchr>
 8004c34:	b138      	cbz	r0, 8004c46 <_svfiprintf_r+0x142>
 8004c36:	2340      	movs	r3, #64	; 0x40
 8004c38:	1b40      	subs	r0, r0, r5
 8004c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	4303      	orrs	r3, r0
 8004c42:	3701      	adds	r7, #1
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	7839      	ldrb	r1, [r7, #0]
 8004c48:	4827      	ldr	r0, [pc, #156]	; (8004ce8 <_svfiprintf_r+0x1e4>)
 8004c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c4e:	2206      	movs	r2, #6
 8004c50:	1c7e      	adds	r6, r7, #1
 8004c52:	f7fb fabd 	bl	80001d0 <memchr>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d038      	beq.n	8004ccc <_svfiprintf_r+0x1c8>
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <_svfiprintf_r+0x1e8>)
 8004c5c:	bb13      	cbnz	r3, 8004ca4 <_svfiprintf_r+0x1a0>
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	3307      	adds	r3, #7
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	3308      	adds	r3, #8
 8004c68:	9303      	str	r3, [sp, #12]
 8004c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6c:	444b      	add	r3, r9
 8004c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c70:	e76d      	b.n	8004b4e <_svfiprintf_r+0x4a>
 8004c72:	fb05 3202 	mla	r2, r5, r2, r3
 8004c76:	2001      	movs	r0, #1
 8004c78:	460f      	mov	r7, r1
 8004c7a:	e7a6      	b.n	8004bca <_svfiprintf_r+0xc6>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	3701      	adds	r7, #1
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	4619      	mov	r1, r3
 8004c84:	250a      	movs	r5, #10
 8004c86:	4638      	mov	r0, r7
 8004c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c8c:	3a30      	subs	r2, #48	; 0x30
 8004c8e:	2a09      	cmp	r2, #9
 8004c90:	d903      	bls.n	8004c9a <_svfiprintf_r+0x196>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0c8      	beq.n	8004c28 <_svfiprintf_r+0x124>
 8004c96:	9105      	str	r1, [sp, #20]
 8004c98:	e7c6      	b.n	8004c28 <_svfiprintf_r+0x124>
 8004c9a:	fb05 2101 	mla	r1, r5, r1, r2
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	e7f0      	b.n	8004c86 <_svfiprintf_r+0x182>
 8004ca4:	ab03      	add	r3, sp, #12
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <_svfiprintf_r+0x1ec>)
 8004cac:	a904      	add	r1, sp, #16
 8004cae:	4640      	mov	r0, r8
 8004cb0:	f3af 8000 	nop.w
 8004cb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cb8:	4681      	mov	r9, r0
 8004cba:	d1d6      	bne.n	8004c6a <_svfiprintf_r+0x166>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	065b      	lsls	r3, r3, #25
 8004cc0:	f53f af35 	bmi.w	8004b2e <_svfiprintf_r+0x2a>
 8004cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cc6:	b01d      	add	sp, #116	; 0x74
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	ab03      	add	r3, sp, #12
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <_svfiprintf_r+0x1ec>)
 8004cd4:	a904      	add	r1, sp, #16
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f000 f882 	bl	8004de0 <_printf_i>
 8004cdc:	e7ea      	b.n	8004cb4 <_svfiprintf_r+0x1b0>
 8004cde:	bf00      	nop
 8004ce0:	080052a8 	.word	0x080052a8
 8004ce4:	080052ae 	.word	0x080052ae
 8004ce8:	080052b2 	.word	0x080052b2
 8004cec:	00000000 	.word	0x00000000
 8004cf0:	08004a51 	.word	0x08004a51

08004cf4 <_printf_common>:
 8004cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	4691      	mov	r9, r2
 8004cfa:	461f      	mov	r7, r3
 8004cfc:	688a      	ldr	r2, [r1, #8]
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bfb8      	it	lt
 8004d08:	4613      	movlt	r3, r2
 8004d0a:	f8c9 3000 	str.w	r3, [r9]
 8004d0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d12:	4606      	mov	r6, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	b112      	cbz	r2, 8004d1e <_printf_common+0x2a>
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f8c9 3000 	str.w	r3, [r9]
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	0699      	lsls	r1, r3, #26
 8004d22:	bf42      	ittt	mi
 8004d24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d28:	3302      	addmi	r3, #2
 8004d2a:	f8c9 3000 	strmi.w	r3, [r9]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	f015 0506 	ands.w	r5, r5, #6
 8004d34:	d107      	bne.n	8004d46 <_printf_common+0x52>
 8004d36:	f104 0a19 	add.w	sl, r4, #25
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	dc28      	bgt.n	8004d98 <_printf_common+0xa4>
 8004d46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	3300      	adds	r3, #0
 8004d4e:	bf18      	it	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	0692      	lsls	r2, r2, #26
 8004d54:	d42d      	bmi.n	8004db2 <_printf_common+0xbe>
 8004d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	47c0      	blx	r8
 8004d60:	3001      	adds	r0, #1
 8004d62:	d020      	beq.n	8004da6 <_printf_common+0xb2>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	68e5      	ldr	r5, [r4, #12]
 8004d68:	f8d9 2000 	ldr.w	r2, [r9]
 8004d6c:	f003 0306 	and.w	r3, r3, #6
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	bf08      	it	eq
 8004d74:	1aad      	subeq	r5, r5, r2
 8004d76:	68a3      	ldr	r3, [r4, #8]
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	bf0c      	ite	eq
 8004d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d80:	2500      	movne	r5, #0
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bfc4      	itt	gt
 8004d86:	1a9b      	subgt	r3, r3, r2
 8004d88:	18ed      	addgt	r5, r5, r3
 8004d8a:	f04f 0900 	mov.w	r9, #0
 8004d8e:	341a      	adds	r4, #26
 8004d90:	454d      	cmp	r5, r9
 8004d92:	d11a      	bne.n	8004dca <_printf_common+0xd6>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e008      	b.n	8004daa <_printf_common+0xb6>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4630      	mov	r0, r6
 8004da0:	47c0      	blx	r8
 8004da2:	3001      	adds	r0, #1
 8004da4:	d103      	bne.n	8004dae <_printf_common+0xba>
 8004da6:	f04f 30ff 	mov.w	r0, #4294967295
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	3501      	adds	r5, #1
 8004db0:	e7c3      	b.n	8004d3a <_printf_common+0x46>
 8004db2:	18e1      	adds	r1, r4, r3
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	2030      	movs	r0, #48	; 0x30
 8004db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dbc:	4422      	add	r2, r4
 8004dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	e7c5      	b.n	8004d56 <_printf_common+0x62>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4639      	mov	r1, r7
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d0e6      	beq.n	8004da6 <_printf_common+0xb2>
 8004dd8:	f109 0901 	add.w	r9, r9, #1
 8004ddc:	e7d8      	b.n	8004d90 <_printf_common+0x9c>
	...

08004de0 <_printf_i>:
 8004de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004de4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004de8:	460c      	mov	r4, r1
 8004dea:	7e09      	ldrb	r1, [r1, #24]
 8004dec:	b085      	sub	sp, #20
 8004dee:	296e      	cmp	r1, #110	; 0x6e
 8004df0:	4617      	mov	r7, r2
 8004df2:	4606      	mov	r6, r0
 8004df4:	4698      	mov	r8, r3
 8004df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004df8:	f000 80b3 	beq.w	8004f62 <_printf_i+0x182>
 8004dfc:	d822      	bhi.n	8004e44 <_printf_i+0x64>
 8004dfe:	2963      	cmp	r1, #99	; 0x63
 8004e00:	d036      	beq.n	8004e70 <_printf_i+0x90>
 8004e02:	d80a      	bhi.n	8004e1a <_printf_i+0x3a>
 8004e04:	2900      	cmp	r1, #0
 8004e06:	f000 80b9 	beq.w	8004f7c <_printf_i+0x19c>
 8004e0a:	2958      	cmp	r1, #88	; 0x58
 8004e0c:	f000 8083 	beq.w	8004f16 <_printf_i+0x136>
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e18:	e032      	b.n	8004e80 <_printf_i+0xa0>
 8004e1a:	2964      	cmp	r1, #100	; 0x64
 8004e1c:	d001      	beq.n	8004e22 <_printf_i+0x42>
 8004e1e:	2969      	cmp	r1, #105	; 0x69
 8004e20:	d1f6      	bne.n	8004e10 <_printf_i+0x30>
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	0605      	lsls	r5, r0, #24
 8004e28:	f103 0104 	add.w	r1, r3, #4
 8004e2c:	d52a      	bpl.n	8004e84 <_printf_i+0xa4>
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	da03      	bge.n	8004e3e <_printf_i+0x5e>
 8004e36:	222d      	movs	r2, #45	; 0x2d
 8004e38:	425b      	negs	r3, r3
 8004e3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e3e:	486f      	ldr	r0, [pc, #444]	; (8004ffc <_printf_i+0x21c>)
 8004e40:	220a      	movs	r2, #10
 8004e42:	e039      	b.n	8004eb8 <_printf_i+0xd8>
 8004e44:	2973      	cmp	r1, #115	; 0x73
 8004e46:	f000 809d 	beq.w	8004f84 <_printf_i+0x1a4>
 8004e4a:	d808      	bhi.n	8004e5e <_printf_i+0x7e>
 8004e4c:	296f      	cmp	r1, #111	; 0x6f
 8004e4e:	d020      	beq.n	8004e92 <_printf_i+0xb2>
 8004e50:	2970      	cmp	r1, #112	; 0x70
 8004e52:	d1dd      	bne.n	8004e10 <_printf_i+0x30>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	f043 0320 	orr.w	r3, r3, #32
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	e003      	b.n	8004e66 <_printf_i+0x86>
 8004e5e:	2975      	cmp	r1, #117	; 0x75
 8004e60:	d017      	beq.n	8004e92 <_printf_i+0xb2>
 8004e62:	2978      	cmp	r1, #120	; 0x78
 8004e64:	d1d4      	bne.n	8004e10 <_printf_i+0x30>
 8004e66:	2378      	movs	r3, #120	; 0x78
 8004e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e6c:	4864      	ldr	r0, [pc, #400]	; (8005000 <_printf_i+0x220>)
 8004e6e:	e055      	b.n	8004f1c <_printf_i+0x13c>
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	1d19      	adds	r1, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6011      	str	r1, [r2, #0]
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e80:	2301      	movs	r3, #1
 8004e82:	e08c      	b.n	8004f9e <_printf_i+0x1be>
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6011      	str	r1, [r2, #0]
 8004e88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e8c:	bf18      	it	ne
 8004e8e:	b21b      	sxthne	r3, r3
 8004e90:	e7cf      	b.n	8004e32 <_printf_i+0x52>
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	6825      	ldr	r5, [r4, #0]
 8004e96:	1d18      	adds	r0, r3, #4
 8004e98:	6010      	str	r0, [r2, #0]
 8004e9a:	0628      	lsls	r0, r5, #24
 8004e9c:	d501      	bpl.n	8004ea2 <_printf_i+0xc2>
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	e002      	b.n	8004ea8 <_printf_i+0xc8>
 8004ea2:	0668      	lsls	r0, r5, #25
 8004ea4:	d5fb      	bpl.n	8004e9e <_printf_i+0xbe>
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	4854      	ldr	r0, [pc, #336]	; (8004ffc <_printf_i+0x21c>)
 8004eaa:	296f      	cmp	r1, #111	; 0x6f
 8004eac:	bf14      	ite	ne
 8004eae:	220a      	movne	r2, #10
 8004eb0:	2208      	moveq	r2, #8
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eb8:	6865      	ldr	r5, [r4, #4]
 8004eba:	60a5      	str	r5, [r4, #8]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	f2c0 8095 	blt.w	8004fec <_printf_i+0x20c>
 8004ec2:	6821      	ldr	r1, [r4, #0]
 8004ec4:	f021 0104 	bic.w	r1, r1, #4
 8004ec8:	6021      	str	r1, [r4, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d13d      	bne.n	8004f4a <_printf_i+0x16a>
 8004ece:	2d00      	cmp	r5, #0
 8004ed0:	f040 808e 	bne.w	8004ff0 <_printf_i+0x210>
 8004ed4:	4665      	mov	r5, ip
 8004ed6:	2a08      	cmp	r2, #8
 8004ed8:	d10b      	bne.n	8004ef2 <_printf_i+0x112>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	07db      	lsls	r3, r3, #31
 8004ede:	d508      	bpl.n	8004ef2 <_printf_i+0x112>
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	6862      	ldr	r2, [r4, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	bfde      	ittt	le
 8004ee8:	2330      	movle	r3, #48	; 0x30
 8004eea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ef2:	ebac 0305 	sub.w	r3, ip, r5
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	f8cd 8000 	str.w	r8, [sp]
 8004efc:	463b      	mov	r3, r7
 8004efe:	aa03      	add	r2, sp, #12
 8004f00:	4621      	mov	r1, r4
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff fef6 	bl	8004cf4 <_printf_common>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d14d      	bne.n	8004fa8 <_printf_i+0x1c8>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	b005      	add	sp, #20
 8004f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f16:	4839      	ldr	r0, [pc, #228]	; (8004ffc <_printf_i+0x21c>)
 8004f18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f1c:	6813      	ldr	r3, [r2, #0]
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	1d1d      	adds	r5, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6015      	str	r5, [r2, #0]
 8004f26:	060a      	lsls	r2, r1, #24
 8004f28:	d50b      	bpl.n	8004f42 <_printf_i+0x162>
 8004f2a:	07ca      	lsls	r2, r1, #31
 8004f2c:	bf44      	itt	mi
 8004f2e:	f041 0120 	orrmi.w	r1, r1, #32
 8004f32:	6021      	strmi	r1, [r4, #0]
 8004f34:	b91b      	cbnz	r3, 8004f3e <_printf_i+0x15e>
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	f022 0220 	bic.w	r2, r2, #32
 8004f3c:	6022      	str	r2, [r4, #0]
 8004f3e:	2210      	movs	r2, #16
 8004f40:	e7b7      	b.n	8004eb2 <_printf_i+0xd2>
 8004f42:	064d      	lsls	r5, r1, #25
 8004f44:	bf48      	it	mi
 8004f46:	b29b      	uxthmi	r3, r3
 8004f48:	e7ef      	b.n	8004f2a <_printf_i+0x14a>
 8004f4a:	4665      	mov	r5, ip
 8004f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f50:	fb02 3311 	mls	r3, r2, r1, r3
 8004f54:	5cc3      	ldrb	r3, [r0, r3]
 8004f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d1f5      	bne.n	8004f4c <_printf_i+0x16c>
 8004f60:	e7b9      	b.n	8004ed6 <_printf_i+0xf6>
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	6825      	ldr	r5, [r4, #0]
 8004f66:	6961      	ldr	r1, [r4, #20]
 8004f68:	1d18      	adds	r0, r3, #4
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	0628      	lsls	r0, r5, #24
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	d501      	bpl.n	8004f76 <_printf_i+0x196>
 8004f72:	6019      	str	r1, [r3, #0]
 8004f74:	e002      	b.n	8004f7c <_printf_i+0x19c>
 8004f76:	066a      	lsls	r2, r5, #25
 8004f78:	d5fb      	bpl.n	8004f72 <_printf_i+0x192>
 8004f7a:	8019      	strh	r1, [r3, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	4665      	mov	r5, ip
 8004f82:	e7b9      	b.n	8004ef8 <_printf_i+0x118>
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	1d19      	adds	r1, r3, #4
 8004f88:	6011      	str	r1, [r2, #0]
 8004f8a:	681d      	ldr	r5, [r3, #0]
 8004f8c:	6862      	ldr	r2, [r4, #4]
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4628      	mov	r0, r5
 8004f92:	f7fb f91d 	bl	80001d0 <memchr>
 8004f96:	b108      	cbz	r0, 8004f9c <_printf_i+0x1bc>
 8004f98:	1b40      	subs	r0, r0, r5
 8004f9a:	6060      	str	r0, [r4, #4]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa6:	e7a7      	b.n	8004ef8 <_printf_i+0x118>
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	462a      	mov	r2, r5
 8004fac:	4639      	mov	r1, r7
 8004fae:	4630      	mov	r0, r6
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d0aa      	beq.n	8004f0c <_printf_i+0x12c>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	079b      	lsls	r3, r3, #30
 8004fba:	d413      	bmi.n	8004fe4 <_printf_i+0x204>
 8004fbc:	68e0      	ldr	r0, [r4, #12]
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	4298      	cmp	r0, r3
 8004fc2:	bfb8      	it	lt
 8004fc4:	4618      	movlt	r0, r3
 8004fc6:	e7a3      	b.n	8004f10 <_printf_i+0x130>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	464a      	mov	r2, r9
 8004fcc:	4639      	mov	r1, r7
 8004fce:	4630      	mov	r0, r6
 8004fd0:	47c0      	blx	r8
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d09a      	beq.n	8004f0c <_printf_i+0x12c>
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	68e3      	ldr	r3, [r4, #12]
 8004fda:	9a03      	ldr	r2, [sp, #12]
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	42ab      	cmp	r3, r5
 8004fe0:	dcf2      	bgt.n	8004fc8 <_printf_i+0x1e8>
 8004fe2:	e7eb      	b.n	8004fbc <_printf_i+0x1dc>
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	f104 0919 	add.w	r9, r4, #25
 8004fea:	e7f5      	b.n	8004fd8 <_printf_i+0x1f8>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1ac      	bne.n	8004f4a <_printf_i+0x16a>
 8004ff0:	7803      	ldrb	r3, [r0, #0]
 8004ff2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ffa:	e76c      	b.n	8004ed6 <_printf_i+0xf6>
 8004ffc:	080052b9 	.word	0x080052b9
 8005000:	080052ca 	.word	0x080052ca

08005004 <memmove>:
 8005004:	4288      	cmp	r0, r1
 8005006:	b510      	push	{r4, lr}
 8005008:	eb01 0302 	add.w	r3, r1, r2
 800500c:	d807      	bhi.n	800501e <memmove+0x1a>
 800500e:	1e42      	subs	r2, r0, #1
 8005010:	4299      	cmp	r1, r3
 8005012:	d00a      	beq.n	800502a <memmove+0x26>
 8005014:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005018:	f802 4f01 	strb.w	r4, [r2, #1]!
 800501c:	e7f8      	b.n	8005010 <memmove+0xc>
 800501e:	4283      	cmp	r3, r0
 8005020:	d9f5      	bls.n	800500e <memmove+0xa>
 8005022:	1881      	adds	r1, r0, r2
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	42d3      	cmn	r3, r2
 8005028:	d100      	bne.n	800502c <memmove+0x28>
 800502a:	bd10      	pop	{r4, pc}
 800502c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005030:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005034:	e7f7      	b.n	8005026 <memmove+0x22>

08005036 <_realloc_r>:
 8005036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005038:	4607      	mov	r7, r0
 800503a:	4614      	mov	r4, r2
 800503c:	460e      	mov	r6, r1
 800503e:	b921      	cbnz	r1, 800504a <_realloc_r+0x14>
 8005040:	4611      	mov	r1, r2
 8005042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005046:	f7ff bc77 	b.w	8004938 <_malloc_r>
 800504a:	b922      	cbnz	r2, 8005056 <_realloc_r+0x20>
 800504c:	f7ff fc26 	bl	800489c <_free_r>
 8005050:	4625      	mov	r5, r4
 8005052:	4628      	mov	r0, r5
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005056:	f000 f814 	bl	8005082 <_malloc_usable_size_r>
 800505a:	42a0      	cmp	r0, r4
 800505c:	d20f      	bcs.n	800507e <_realloc_r+0x48>
 800505e:	4621      	mov	r1, r4
 8005060:	4638      	mov	r0, r7
 8005062:	f7ff fc69 	bl	8004938 <_malloc_r>
 8005066:	4605      	mov	r5, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	d0f2      	beq.n	8005052 <_realloc_r+0x1c>
 800506c:	4631      	mov	r1, r6
 800506e:	4622      	mov	r2, r4
 8005070:	f7ff fc00 	bl	8004874 <memcpy>
 8005074:	4631      	mov	r1, r6
 8005076:	4638      	mov	r0, r7
 8005078:	f7ff fc10 	bl	800489c <_free_r>
 800507c:	e7e9      	b.n	8005052 <_realloc_r+0x1c>
 800507e:	4635      	mov	r5, r6
 8005080:	e7e7      	b.n	8005052 <_realloc_r+0x1c>

08005082 <_malloc_usable_size_r>:
 8005082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005086:	1f18      	subs	r0, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	bfbc      	itt	lt
 800508c:	580b      	ldrlt	r3, [r1, r0]
 800508e:	18c0      	addlt	r0, r0, r3
 8005090:	4770      	bx	lr
	...

08005094 <_init>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr

080050a0 <_fini>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr
